{1,
{14,
{"ГВК_Шаблоны",1,0,"",""},
{10,
{"ОблегчениеИОформление",1,0,"",""},
{0,
{"ДляУдаления",0,0,"удл","#Если Сервер И НЕ Сервер Тогда  // < удалить
	<?>
#КонецЕсли // удалить >"}
},
{0,
{"СтрокаИстории",0,0,"СтрИст","// <?""Версия"">  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">  <?>
"}
},
{0,
{"начконизм",0,0,"гвк","//изм ГВК <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Номер трекера""> {
<?>
// ГВК <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Номер трекера""> }"}
},
{0,
{"ЗначениеЗаполнено",0,0,"зз","ЗначениеЗаполнено(<?> )"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"ззс","ЗаполнитьЗначенияСвойств (<?""Приемник"">,<?""Источник"">);"}
},
{0,
{"ДобавитьВНаборЗаписей",0,0,"ДобавитьВНЗ","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборзаписей();
НаборЗаписей.Отбор.Свойство.Установить(СтароеСвойство);
НаборЗаписей.Отбор.Значение.Установить(ИД);
ЗаписьРегистра = НаборЗаписей.Добавить();
ЗаписьРегистра.Объект = Объект;
НаборЗаписей.Записать();"}
},
{0,
{"МодульФормыСтандарт",0,1,"","#Область ОбработчикиСобытийФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
},
{0,
{"ЗаголовокКоментарий",0,0,"///","///////////////////////////////////////////////////////////////////////////////////////////////////////
// <?>
"}
},
{0,
{"НовыеСтроковыеФункции",0,0,"","// НовыеСтроковыеФункции - для старых версий!!!

Функция СтрНачинаетсяС(ИсходнаяСтрока, СтрокаПоиска)
	Рез = Ложь;
	Если СтрДлина(СтрокаПоиска) = 0 Тогда
		ВызватьИсключение (""Пустая строка поиска"");
	КонецЕсли; 
	Если СтрДлина(СтрокаПоиска) <= СтрДлина(ИсходнаяСтрока)  Тогда
		Рез = ( СтрокаПоиска = Лев(ИсходнаяСтрока,СтрДлина(СтрокаПоиска) ) );
	КонецЕсли;  
	Возврат Рез;	
КонецФункции

Функция СтрСоединить(МассивСлов, Разделитель)
	#Если Сервер И НЕ Сервер Тогда  // < удалить
		МассивСлов = Новый  Массив;
	#КонецЕсли // удалить >
	Рез = """";
	
	Для каждого Слово Из МассивСлов Цикл
		Если Рез = """" Тогда
			Рез = Слово;
		Иначе
			Рез = Рез + Разделитель + Слово;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция СтрРазделить(ИсходнаяСтрока, Разделитель, ВключатьПустые = Истина)
	ТекСтрока = ИсходнаяСтрока;
	МассивСлов = Новый Массив;
	
	Пока Найти(ТекСтрока,Разделитель) <> 0 Цикл
		Слово = Лев(ТекСтрока, Найти(ТекСтрока,Разделитель)-1);
		Если ЗначениеЗаполнено(Слово) ИЛИ ВключатьПустые Тогда
			МассивСлов.Добавить(Слово);
		КонецЕсли;
		ТекСтрока = Сред(ТекСтрока,Найти(ТекСтрока,Разделитель)+1 );
	КонецЦикла; 
	Если ЗначениеЗаполнено(ТекСтрока)  Тогда
		МассивСлов.Добавить(ТекСтрока);
	КонецЕсли; 
	
	Возврат МассивСлов;
	
КонецФункции


"}
},
{0,
{"NULL",0,0,"ТГДД","NULL"}
}
},
{18,
{"Управляемые формы",1,0,"",""},
{0,
{"ПолучитьЗначениеРеквизита",0,0,"","&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)

	Рез = Неопределено;
	Попытка
	    Рез = СсылкаНаОбъект[ИмяРеквизита]; 
	Исключение
	
	КонецПопытки; 
		
	Возврат Рез;

КонецФункции // ПолучитьЗначениеРеквизита()
 "}
},
{0,
{"ПолучитьРеквизитыНаСервере",0,0,"","&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыНаСервере(ОбъектСсылка, Реквизиты)
 	
	ЗаполнитьЗначенияСвойств(Реквизиты, ОбъектСсылка);	

КонецПроцедуры
"}
},
{0,
{"НаСервереБезКонтекста",0,1,"?насерб","&НаСервереБезКонтекста"}
},
{0,
{"НаСервере",0,1,"?насер","&НаСервере"}
},
{0,
{"НаКлиенте",0,1,"?накл","&НаКлиенте"}
},
{0,
{"УстановитьАвтоТест",0,1,"автотест","	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
"}
},
{0,
{"УстановкаПараметра",0,0,"УстПар","Параметр<?""Параметр""> = Неопределено;
Если Параметры.Свойство (""<?""Параметр"">"", Параметр<?""Параметр"">) Тогда
	<?""Параметр""> = Параметр<?""Параметр"">;
КонецЕсли;
"}
},
{0,
{"СообщениеГВК",0,0,"Сооб[щение]","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = НСтр(""ru = '<?>'"");
Сообщение.Поле = """";
Сообщение.УстановитьДанные();
Сообщение.Сообщить();"}
},
{0,
{"НовыйОтборСписка",0,0,"","ЭлементОтбора = <?""ИмяСписка"">.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(""<?""ИмяОтбора"">"");
ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование  = Истина;
ЭлементОтбора.ПравоеЗначение = <?""ИмяОтбора"">;
ЭлементОтбора.Представление  = ""<?""ИмяОтбора"">"";
"}
},
{0,
{"ПредопределенноеЗначение",0,0,"ПЗ","ПредопределенноеЗначение (""<?>"");"}
},
{0,
{"ДобавитьКомандуНаФорму",0,0,"","// === образец ===
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    МоиРеквизиты = Новый Массив;
    ТипСтрока = Новый ОписаниеТипов(""Строка"", , Новый КвалификаторыСтроки());
    МоиРеквизиты.Добавить(Новый РеквизитФормы(""ОписаниеОбъекта"", ТипСтрока, """", ""Описание объекта"", Ложь));
    ИзменитьРеквизиты(МоиРеквизиты);
    Команда = Команды.Добавить(""ИзменитьСтроку"");
    Команда.Действие = ""ОбработчикПрограммныхКоманд"";
    Команда.Заголовок = ""Изменить строку"";
    Элемент = Элементы.Добавить(""ОписаниеОбъекта"", Тип(""ПолеФормы""));
    Элемент.Вид = ВидПоляФормы.ПолеВвода;
    Элемент.ПутьКДанным = ""ОписаниеОбъекта"";
    Элемент = Элементы.Добавить(""ИзменитьСтроку"", Тип(""КнопкаФормы""));
    Элемент.ИмяКоманды = ""ИзменитьСтроку"";
КонецПроцедуры
...
&НаКлиенте
Процедура ОбработчикПрограммныхКоманд(Команда)
    ЭтотОбъект.ОписаниеОбъекта = ""Описание объекта, сформированное командой"";
КонецПроцедуры"}
},
{0,
{"ПерейтиНаСайтГВК",0,0,"","ЗапуститьПриложение(""http://gvk-it.ru"");"}
},
{0,
{"ДобавитьРеквизитТЧ",0,0,"","	// Добавить реквизит в табличную часть на управляемую форму. в ПриСозданииНаСервере
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип(""Строка""));
	ТипыРеквизита.Добавить(Тип(""Дата""));
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита,,,,
		Новый КвалификаторыСтроки(100),
		Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
	НовыйРеквизит = Новый РеквизитФормы(""ЗначениеПараметра"",  // имя
		ОписаниеТиповДляРеквизита,                      // тип
		""Объект.ПараметрыЗапросов"",   // путь
		""Значение параметра"",                           // заголовок
		Ложь);                                          // сохраняемые данные
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	// Добавить элемент формы и связать его с реквизитом.
	НовыйЭлемент = Элементы.Добавить(""ПараметрыЗапросовЗначениеПараметра"", Тип(""ПолеФормы""), Элементы.ПараметрыЗапросов);
	НовыйЭлемент.ПутьКДанным = ""Объект.ПараметрыЗапросов.ЗначениеПараметра"";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.КнопкаОчистки = Истина;
	
"}
},
{0,
{"ДобавитьРеквизитНаУФ",0,0,"","	// Добавить реквизит на управляемую форму. в ПриСозданииНаСервере
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип(""Строка""));
	ТипыРеквизита.Добавить(Тип(""Дата""));
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита,,,,
		Новый КвалификаторыСтроки(100),
		Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
	НовыйРеквизит = Новый РеквизитФормы(""ЗначениеПараметра"",  // имя
		ОписаниеТиповДляРеквизита,                      // тип
		""Объект.ПараметрыЗапросов"",   // путь
		""Значение параметра"",                           // заголовок
		Ложь);                                          // сохраняемые данные
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	// Добавить элемент формы и связать его с реквизитом.
	НовыйЭлемент = Элементы.Добавить(""ПараметрыЗапросовЗначениеПараметра"", Тип(""ПолеФормы""), Элементы.ПараметрыЗапросов);
	НовыйЭлемент.ПутьКДанным = ""Объект.ПараметрыЗапросов.ЗначениеПараметра"";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.КнопкаОчистки = Истина;
	НовыйЭлемент.УстановитьДействие(""ПриИзменении"",""ПараметрыЗапросовЗначениеПараметраПриИзменении"");
	
"}
},
{0,
{"ДобавитьГруппуНаУФ",0,0,"","	НовыйЭлемент = Элементы.Добавить(""гвк_ГруппаПунктСметы"", Тип(""ГруппаФормы""), Элементы.ГруппаПодвал);
	НовыйЭлемент.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Заголовок = """";
	НовыйЭлемент.Отображение =  ОтображениеОбычнойГруппы.СильноеВыделение;
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НовыйЭлемент.ОтображатьЗаголовок = Ложь;
"}
},
{0,
{"ПроверкаНового",0,0,"ПроверитьНовый","    Если Параметры.Ключ.Пустая() Тогда
      //Сообщить(""Создается новый объект"");
    КонецЕсли;
"}
},
{0,
{"ПроверитЗаполнение",0,0,"","// проверить заполнение полей с выдачей сообщений
"}
},
{0,
{"ПоместитьФайлНаСервер",0,0,"","&НаСервере
Процедура гвк_СформироватьДБФ_НаСервере()

	Если АдресФайлаНаСервере = """" Тогда
        Сообщить(""Сначала нужно передать файл с клиента на сервер."");
        Возврат;
    КонецЕсли;
 
    ДвоичныеДанные = 
        ПолучитьИзВременногоХранилища(АдресФайлаНаСервере);
 
    Если ДвоичныеДанные = Неопределено Тогда
        Сообщить(""Похоже файл уже был удалён из хранилища."");
        Возврат;
    КонецЕсли;
    
	ПолныйПутьФайлаНаСервере =  КаталогВременныхФайлов() +  ПолучитьРазделительПути() + ""apteka.dbf"";
	
	ДвоичныеДанные.Записать(ПолныйПутьФайлаНаСервере);

КонецПроцедуры // 	гвк_ЗагрузитьДанные()

&НаКлиенте
Процедура ПоместитьФайлНаСервер(Команда)
    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
    ПараметрыДиалога.Заголовок = ""НачатьПомещениеФайлаНаСервер"";
    ПараметрыДиалога.МножественныйВыбор = Истина;
    ПараметрыДиалога.Фильтр = ""ДБФ файл|*.dbf|Все файлы|*.*"";
    ЗавершениеОбратныйВызов = Новый ОписаниеОповещения(""ЗавершениеОбратныйВызов"", ЭтотОбъект);
    ПрогрессОбратныйВызов = Новый ОписаниеОповещения(""ПрогрессОбратныйВызов"", ЭтотОбъект);
    ПередНачалоОбратныйВызов = Новый ОписаниеОповещения(""ПередНачалоОбратныйВызов"", ЭтотОбъект);
    НачатьПомещениеФайлаНаСервер(ЗавершениеОбратныйВызов, ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов, , ПараметрыДиалога, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбратныйВызов(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
    Сообщить(""Помещение файла "" + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, ""на сервер отменено"", ""на сервер выполнено успешно""));
	//Сообщить(""Адрес во временном хранилище: "" + ОписаниеПомещенногоФайла.Адрес);
	//Сообщить(""Имя файла: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
	//Сообщить(""Размер файла, байт: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер());
	Если ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		ПолныйПутьФайлаНаСервере = """";
	Иначе
		АдресФайлаНаСервере = ОписаниеПомещенногоФайла.Адрес;
		гвк_СформироватьДБФ_НаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Состояние(""Файл "" + ПомещаемыйФайл.Имя, Помещено, ""Файл имеет размер "" + ПомещаемыйФайл.Размер() + "" байт"", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    //Сообщить(""Помещаемый файл - "" + ПомещаемыйФайл.Имя + "", размер = "" + ПомещаемыйФайл.Размер());
	ИмяФайлаДанных = ПомещаемыйФайл.Файл.ПолноеИмя;
КонецПроцедуры
"}
}
},
{7,
{"НовыеДиалоги",1,0,"",""},
{0,
{"ВопросДаНет",0,0,"ВопросДаНет","&НаКлиенте
Процедура ОбработкаВопросаОчистки(РезультатВопроса,ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 	

КонецПроцедуры
 

&НаКлиенте
Процедура <?""ИмяПроцедуры"">()
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ОбработкаВопросаОчистки"", ЭтотОбъект);
	ТекстВопроса = НСтр(""ru = 'Таблица заказов будет очищена. Продолжить?'"");
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ,);
	
КонецПроцедуры
"}
},
{0,
{"НемодальныйВызов",0,0,"","
	ДопПараметры = Новый Структура(); 
	ОписаниеОповещенияОСобытии = Новый ОписаниеОповещения(""""<?""ИмяОбработкиЗавершения"">"""", ЭтотОбъект, ДопПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВеcьИнтерфейс;
	ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Добавить(Ключ,Значение);
	ОткрытьФорму(<?>,ПараметрыФормы, ЭтотОбъект,Истина,,,ОписаниеОповещенияОСобытии,Режим); 
// переместить ! 	
&НаКлиенте
Процедура <?""ИмяОбработкиЗавершения"">(Результат,ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 	

КонецПроцедуры
"}
},
{0,
{"ВыборДиректории",0,0,"","&НаКлиенте
Процедура <?""Имя реквизита"">ОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	<?""Имя реквизита""> = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура <?""Имя реквизита"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""Имя реквизита"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""<?""Имя реквизита"">ОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ВыборФайла",0,0,"","&НаКлиенте
Процедура <?""Имя реквизита"">ОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	<?""Имя реквизита""> = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура <?""Имя реквизита"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие; // ???
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = НСтр(""ru = '<?""Расширение файла"">'; en = '<?""Расширение файла"">'"")
    + ""(*.<?""Расширение файла"">)|*.<?""Расширение файла"">"";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""Имя реквизита"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите файл"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""<?""Имя реквизита"">ОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ВыборИзСписка",0,0,"ВыборИзСписка","// Событие начало выбора для выбора из своего списка
&НаКлиенте
Процедура <?""ЭлементФормы"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РанееВыбранныйЭлементСписка = <?""СписокВыбора"">.НайтиПоЗначению(<?""ВыбранныйЭлемент"">);
	ОписаниеОповещения = Новый ОписаниеОповещения(""<?""ЭлементФормы"">НачалоВыбораОкончание"",ЭтотОбъект,РанееВыбранныйЭлементСписка);
	<?""СписокВыбора"">.ПоказатьВыборЭлемента(ОписаниеОповещения,""Выберите <...> "", );
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура <?""ЭлементФормы"">НачалоВыбораОкончание(ВыбранныйЭлемент,СписокПараметров)Экспорт 
	Если ВыбранныйЭлемент <> Неопределено Тогда
		<?""ЭлементФормы""> = ВыбранныйЭлемент.Значение;
	КонецЕсли; 
КонецПроцедуры
"}
},
{0,
{"ВвестиЗначение",0,0,"ВводЗнач[ения]","&НаКлиенте
Процедура <?""ИмяПроцедуры""> (Команда)
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(Продолжить<?""ИмяПроцедуры"">,ЭтотОбъект);
	НовыйОбъект = Новый <?"""", ВыборТипа> ;
	ДополннительныеПараметры = Новый Структура;
	ПоказатьВводЗначения(ОписаниеОповещенияОЗавершении,НовыйОбъект,ДополннительныеПараметры);
	ЗаполнениеПоПредыдущимДаннымНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Продолжить<?""ИмяПроцедуры""> (ЗначениеОбъекта, ДополнительныеПараметры)
	
КонецПроцедуры
"}
},
{0,
{"ВыборПериода",0,0,"","//* выбор периода - процедуры команды (на кнопку)
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период = <?""РеквизитПериода"">;
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ПродолжитьВыбратьПериод"",ЭтотОбъект);
	ДиалогПериода.Показать(ОписаниеОповещенияОЗавершении); //,ПериодДокументов,ДополннительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыбратьПериод (ЗначениеПериода, ДополнительныеПараметры) Экспорт 
	Если НЕ ЗначениеПериода = Неопределено Тогда
		<?""РеквизитПериода""> = ЗначениеПериода;
	КонецЕсли; 
КонецПроцедуры
"}
}
},
{4,
{"СКД",1,0,"",""},
{0,
{"ФиксированныеПараметры",0,0,"","// данные объекта

Перем Настройки;
Перем ПараметрДанныхНачалоПериода, ПараметрДанныхКонецПериода, ИменованныйОтбор, УсловноеОформление;

// процедуры модуля объекта

Процедура СформироватьОтчет() Экспорт
	Настройки =	КомпоновщикНастроек.Настройки;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
      
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ЭлементыФормы.Результат.Очистить();
	ДокументРезультат = ЭлементыФормы.Результат;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
КонецПроцедуры


Процедура УстановитьНастройки()
	ДатаНачала = НачалоГода(РабочаяДата);
	ДатаОкончания = КонецМесяца(РабочаяДата);
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
	ПараметрДанныхНачалоПериода.Использование = Истина;

	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1];
	ПараметрДанныхКонецПериода.Значение = ДатаОкончания;
	ПараметрДанныхКонецПериода.Использование = Истина;
	
	ИменованныйОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ИспользованиеОтбора = ИменованныйОтбор.Использование;
	ПредставлениеОтбора = ИменованныйОтбор.Представление;
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы[0];
	ИспользованиеОформления = УсловноеОформление.Использование;
	ПредставлениеОформления = УсловноеОформление.Представление;
	
	ПараметрыВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода;
	ПараметрВыводОтбора = ПараметрыВывода.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных(""ВыводитьОтбор""));
	ПараметрВыводОтбора.Использование = Истина;
	ПараметрВыводОтбора.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ПараметрВыводПараметров = ПараметрыВывода.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных(""ВыводитьПараметрыДанных""));
	ПараметрВыводПараметров.Использование = Истина;
	ПараметрВыводПараметров.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	Настройки = КомпоновщикНастроек.Настройки;
КонецПроцедуры

// процедуры модуля формы
//
Процедура ПриОткрытии()
	СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	УстановитьНастройки();
	СформироватьОтчет();
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
КонецПроцедуры

Процедура ДатаОкончанияПриИзменении(Элемент)
	ПараметрДанныхКонецПериода.Значение = ДатаОкончания;
КонецПроцедуры

Процедура ИспользованиеОтбораПриИзменении(Элемент)
	ИменованныйОтбор.Использование = ИспользованиеОтбора;
КонецПроцедуры

Процедура ИспользованиеОформленияПриИзменении(Элемент)
	УсловноеОформление.Использование = ИспользованиеОформления;
КонецПроцедуры
"}
},
{0,
{"ДобавитьОтбор",0,0,"","Функция ДобавитьОтбор(СписокОтборов, ИмяПоля, Значение, ВидСравнения = Неопределено, Использование = Истина)
    НовыйЭлемент = СписокОтборов.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
    НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
    НовыйЭлемент.ВидСравнения = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
    НовыйЭлемент.ПравоеЗначение = Значение;
    НовыйЭлемент.Использование = Использование;
    Возврат НовыйЭлемент;
КонецФункции"}
},
{0,
{"УдалитьОтбор",0,0,"","Функция УдалитьОтбор(СписокОтборов, ИмяПоля = """")
    Если ПустаяСтрока(ИмяПоля) Тогда
        СписокОтборов.Элементы.Очистить();
        Возврат Истина;
    КонецЕсли;
    Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
    ОтборУдален = Ложь;
    Для каждого ЭлементОтбора Из СписокОтборов.Элементы Цикл
        Если ЭлементОтбора.Использование И ЭлементОтбора.ЛевоеЗначение = Поле Тогда
            СписокОтборов.Элементы.Удалить(ЭлементОтбора);
            ОтборУдален = Истина;
        КонецЕсли;
    КонецЦикла;
    Возврат ОтборУдален;
КонецФункции"}
},
{0,
{"ВыводВТаблицуЗначений",0,0,"","КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
Настройки, , , Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ДеревоРезультата);
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
"}
}
},
{11,
{"ДополнительныеОбработки",1,0,"",""},
{0,
{"ВнешнийОтчетГВК",0,0,"","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.4"");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = ""1.0.1.1"";
	ПараметрыРегистрации.ОпределитьНастройкиФормы = Истина;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр(""ru = '<?""Представление"">'"");
	НоваяКоманда.Идентификатор = ""ДополнительныйОтчетПолучитьПростойОтчет"";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Настройки общей формы отчета подсистемы ""Варианты отчетов"".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	//Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных(""Период""), Перечисления.ДоступныеПериодыОтчета.Месяц);
	Настройки.ФормироватьСразу = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	КлючВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, ""КлючВарианта"");
	Если КлючВарианта = ""Исключение"" Тогда
		СтандартнаяОбработка = Ложь;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(""ОтчетПустой"", Истина);
		ВызватьИсключение НСтр(""ru = 'Прикладной текст исключения'"");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли"}
},
{0,
{"СведенияОВнешнейОбработке",0,0,"","// парметры внешней обработки как свойства возвращаемой структуры 
// ВерсияБСП = ""2.2.2.0""
// Вид = 
Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<...>(); //
	// «ДополнительнаяОбработка», «ДополнительныйОтчет», «ЗаполнениеОбъекта», «Отчет», «ПечатнаяФорма» или «СозданиеСвязанныхОбъектов»
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
    ПараметрыРегистрации.Версия = ""1.0.1.1"";
    ПараметрыРегистрации.Информация = ""Обработка предназначена ..."";
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<Представление команды>'"");
    Команда.Идентификатор = ""<Имя команды>"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<...>();
    Команда.ПоказыватьОповещение = <Истина/Ложь>;
    Возврат ПараметрыРегистрации; 
КонецФункции
"}
},
{0,
{"ВнешняяПечатнаяФорма",0,0,"","// внешняя печатная форма
Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма(); //
	// «ДополнительнаяОбработка», «ДополнительныйОтчет», «ЗаполнениеОбъекта», «Отчет», «ПечатнаяФорма» или «СозданиеСвязанныхОбъектов»
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
    ПараметрыРегистрации.Версия = ""0.0.0.1"";
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Представление команды"">'"");
    Команда.Идентификатор = ""<?""Имя команды"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
    Возврат ПараметрыРегистрации; 
КонецФункции

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
    ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ""<?""Имя команды"">"");
    Если ПечатнаяФорма <> Неопределено Тогда
        ПечатнаяФорма.ТабличныйДокумент = СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати);
        ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""Представление команды"">'"");
    КонецЕсли;
КонецПроцедуры

Функция СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати)
    ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет(""Макет"");
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
  	Запрос.Текст = """";

	Запрос.УстановитьПараметр(""МассивОбъектов"",МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть(""Заголовок"");
	ОбластьПодвал = Макет.ПолучитьОбласть(""Подвал"");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть(""ШапкаТаблицы"");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть(""ПодвалТаблицы"");
	ОбластьСсылка = Макет.ПолучитьОбласть(""Ссылка"");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть(""Детали"");
	
	ТабДок.Очистить();
	НомерДокумента = 0;
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		Если НомерДокумента > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаСсылка);
		ОбластьСсылка.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
	
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ТабДок.Вывести(ОбластьДетальныхЗаписей);
		КонецЦикла;
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		ТабДок.Вывести(ОбластьСсылка);
		НомерДокумента = НомерДокумента + 1;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьПодвал);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


    Возврат ТабДок;
КонецФункции
	"}
},
{0,
{"ФормаВнешнейПечатнойФормы",0,0,"","// назначить обработчик для команды Печать 
// ДокументСсылка - документ выбранного типа как реквизит обработки

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм
//
&НаСервере
Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить(""ИмяМакета"");
	Макеты.Колонки.Добавить(""ИмяВРЕГ"");
	Макеты.Колонки.Добавить(""СинонимМакета"");
	Макеты.Колонки.Добавить(""ТабличныйДокумент"");
	Макеты.Колонки.Добавить(""Экземпляров"");
	Макеты.Колонки.Добавить(""Картинка"");
	Макеты.Колонки.Добавить(""ПолныйПутьКМакету"");
	Макеты.Колонки.Добавить(""ИмяФайлаПечатнойФормы"");
	
	Если ТипЗнч(ИменаМакетов) = Тип(""Строка"") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, ""ИмяМакета"");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере()
	// Вставить содержимое обработчика.
	ОбъектыСоответствующиеПечатнойФорме = Новый Массив;
	ОбъектыСоответствующиеПечатнойФорме.Добавить(Объект.ДокументСсылка);
	ПараметрыПечати = Новый Структура;
	ОбъектыПечати = Новый СписокЗначений;
	
	ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(""<?""Имя команды"">"");
	ПараметрыОтправки = Новый Структура(""Получатель,Тема,Текст"",Неопределено ,"""","""" ) ;
	ПараметрыВывода = Новый Структура(""ДоступнаПечатьПоКомплектно,ПараметрыОтправки"" ,Ложь,ПараметрыОтправки);
	//				МенеджерПечати.Печать(ОбъектыСоответствующиеПечатнойФорме, ПараметрыПечати, ВременнаяКоллекцияДляОднойПечатнойФормы, ОбъектыПечати, ПараметрыВывода);
	РеквизитФормыВЗначение(""Объект"").Печать(ОбъектыСоответствующиеПечатнойФорме,ВременнаяКоллекцияДляОднойПечатнойФормы,ОбъектыПечати,ПараметрыВывода);
	ТабДок =ВременнаяКоллекцияДляОднойПечатнойФормы[0].ТабличныйДокумент;
	
	Возврат ТабДок;
		
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечатьНаСервере();
	ТабДок.Показать(""Документ"");
	ПечатьНаСервере();
КонецПроцедуры
"}
},
{0,
{"ВыборФайлаПоНовому",0,0,"","&НаКлиенте
Процедура ДиректорияОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Объект.Директория = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура ДиректорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.Директория;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""ДиректорияОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ИзменениеДокументовВВыборке",0,0,"","////////////////////////////////////////////////////////////////////////////////
//
// Процедура ИсправлениеДокументов
//
// Описание: исправление (изменение) документов отобранных запросом
//          В запросе должно быть поле ДокументСсылка...
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ИсправлениеДокументов(ПериодДокументов) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время начало обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	Счетчики = Новый Структура(""Всего,НеЗаблокировано,Изменено,НеПроведено"",0,0,0,0 );
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =  ""<?"""", ТекстЗапроса>"";
	Запрос.УстановитьПараметр(""ДатаНачала"", ПериодДокументов.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", ПериодДокументов.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Счетчики.Всего = ВыборкаДетальныеЗаписи.Количество();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДокументОбъект = ВыборкаДетальныеЗаписи.ДокументСсылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
			Продолжить;
		КонецПопытки;
		// <...изменения документа..>
		// записываем изменения в любом случае, даже если документ не проводится!!!
		Записывать = Истина;
		Если ДокументОбъект.Проведен Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ДокументОбъект);
				Сообщение.Сообщить(); 
				Счетчики.НеПроведено = Счетчики.НеПроведено + 1;
			КонецПопытки; 
		КонецЕсли;
		Если Записывать Тогда
		    Если ДокументОбъект.Проведен Тогда
			    // ошибка при проведении - записываем с отменой
				Режим = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				Режим = РежимЗаписиДокумента.Запись;
			КонецЕсли; 
			Попытка
				ДокументОбъект.Записать(Режим);
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ДокументОбъект);
				Сообщение.Сообщить(); 
			КонецПопытки; 
		КонецЕсли; 
		ДокументОбъект.Разблокировать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Результат обработки: Всего отобрано - '"") + Счетчики.Всего + нСтр(""ru='; изменено - '"", ""ru"") + Счетчики.Изменено  +
						нСтр(""ru='; было недоступно для изменения - '"", ""ru"") + Счетчики.НеЗаблокировано ;
	Сообщение.Сообщить(); 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время окончания обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	
КонецПроцедуры //ИсправлениеДокументов

 "}
},
{0,
{"ИзменениеОбъектаВВыборке",0,0,"","////////////////////////////////////////////////////////////////////////////////
//
// Процедура ИсправлениеОбъектов
//
// Описание: исправление (изменение) документов отобранных запросом
//          В запросе должно быть поле ДокументСсылка...
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ИсправлениеОбъектов(ПериодДокументов) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время начало обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	Счетчики = Новый Структура(""Всего,НеЗаблокировано,Изменено,НеПроведено"",0,0,0,0 );
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =  ""
		<?"""", ТекстЗапроса>"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Счетчики.Всего = ВыборкаДетальныеЗаписи.Количество();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИсправляемыйОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			ИсправляемыйОбъект.Заблокировать();
		Исключение
			Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
			Продолжить;
		КонецПопытки;
		// <...изменения документа..>
		// записываем изменения в любом случае, даже если документ не проводится!!!
		Записывать = Истина;
		Если Записывать Тогда
			Попытка
				ИсправляемыйОбъект.Записать();
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ИсправляемыйОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ИсправляемыйОбъект);
				Сообщение.Сообщить(); 
			КонецПопытки; 
		КонецЕсли; 
		ИсправляемыйОбъект.Разблокировать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Результат обработки: Всего отобрано - '"") + Счетчики.Всего + нСтр(""ru='; изменено - '"", ""ru"") + Счетчики.Изменено  +
						нСтр(""ru='; было недоступно для изменения - '"", ""ru"") + Счетчики.НеЗаблокировано ;
	Сообщение.Сообщить(); 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время окончания обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	
КонецПроцедуры //ИсправлениеДокументов

 "}
},
{0,
{"Отладка",0,0,"Отладка","Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда 
	Сообщение = Новый СообщениеПользователю; // параметр запуска РежимОтладки
	Сообщение.Текст = ""<?""Текст сообщения"">"";
	Сообщение.Сообщить(); 
КонецЕсли; 
"}
},
{0,
{"ДобавитьНазначениеДокумента",0,0,"","	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
"}
},
{0,
{"ДобавитьНазначениеСправочника",0,0,"","	ПараметрыРегистрации.Назначение.Добавить(""Справочник.<?""Тип Справочник"", Справочник>""); //""Справочник._ДемоКонтрагенты"");
"}
},
{0,
{"ИзменениеДокументаПоСсылке",0,0,"","	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
		Продолжить;
	КонецПопытки;
	// <...изменения документа..>
	// записываем изменения в любом случае, даже если документ не проводится!!!
	Записывать = Истина;
	Если ДокументОбъект.Проведен Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			Записывать = Ложь;
			Счетчики.Изменено = Счетчики.Изменено + 1;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
			Сообщение.УстановитьДанные(ДокументОбъект);
			Сообщение.Сообщить(); 
			Счетчики.НеПроведено = Счетчики.НеПроведено + 1;
		КонецПопытки; 
	КонецЕсли;
	Если Записывать Тогда
	    Если ДокументОбъект.Проведен Тогда
		    // ошибка при проведении - записываем с отменой
			Режим = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			Режим = РежимЗаписиДокумента.Запись;
		КонецЕсли; 
		Попытка
			ДокументОбъект.Записать(Режим);
			Записывать = Ложь;
			Счетчики.Изменено = Счетчики.Изменено + 1;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
			Сообщение.УстановитьДанные(ДокументОбъект);
			Сообщение.Сообщить(); 
		КонецПопытки; 
	КонецЕсли; 
	ДокументОбъект.Разблокировать();
"}
}
},
{4,
{"Расширения",1,0,"",""},
{0,
{"Вместо",0,0,"7вме","&Вместо (""<?>"")"}
},
{0,
{"После",0,0,"7пос","&После (""<?>"")
"}
},
{0,
{"Перед",0,0,"7пер","&Перед (""<?>"")
"}
},
{0,
{"УдалениеВставка",0,0,"","#Удаление
        
#КонецУдаления
#Вставка
        
#КонецВставки
"}
}
},
{1,
{"Управление",1,0,"",""},
{0,
{"ЕслиИначе",0,0,"ЕслиИ","Если <?> Тогда
	
Иначе
	
КонецЕсли; "}
}
},
{3,
{"Коллекции",1,0,"",""},
{0,
{"КолонкаТЗ",0,0,"ДобКол","Колонки.Добавить(""<?""Имя колонки"">"",Новый ОписаниеТипов(<?"""", ВыборТипа>));"}
},
{0,
{"УдалениеЭлементов",0,0,"УдлЭлем","инд_ = <?""Коллекция"">.Количество();
Пока инд_ > 0 Цикл
	инд_ = инд_ - 1;
	ЭлементКол_ = <?""Коллекция""> [инд_]; 
	Если (ЭлементКол_.Имя = ""Имя"") Тогда // заменить на нужное !!! ???
			<?""Коллекция"">.Удалить(ЭлементКол_);
	КонецЕсли; 
КонецЦикла;"}
},
{0,
{"Структура",0,0,"струк[тура]","Новый Структура ();"}
}
},
{5,
{"Стандарты + БСП",1,0,"",""},
{0,
{"ШаблонМодуляФормы",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Описание параметров формы
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонОбщегоМодуля",0,0,"","////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
// 
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонМодуляОбработкиИОбъекта",0,0,"","#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытий
//Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонМодуляФормыОбъекта",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Описание параметров формы
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// вызов механизмов стандартных подсистем
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//
	ИнициализацияФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ИнициализацияФормы()
	
КонецПроцедуры
#КонецОбласти"}
},
{0,
{"ВыводТабличногоДокумента",0,0,"","	// вывод в стандартную форму табличного документа (БСП)
	ИдентификаторПечатнойФормы = ""<?""ИдентификаторПечатнойФормы"">"";
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""СинонимПечатнойФормы"">'"");
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр(""ru = '<?""ИмяФайлаПечатнойФормы"">'"");
	
	ОбъектыПечати = Новый СписокЗначений;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура(""ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати"");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ПараметрыПечати.Вставить(""ЗаголовокФормы"", НСтр(""ru = '<?""СинонимПечатнойФормы"">'""));
	
	ПараметрыОткрытия.Вставить(""КоллекцияПечатныхФорм"", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить(""ОбъектыПечати"", ОбъектыПечати);
	
	ОткрытьФорму(""ОбщаяФорма.ПечатьДокументов"", ПараметрыОткрытия, Неопределено, КлючУникальности);
"}
}
},
{9,
{"Алгоритмы",1,0,"",""},
{0,
{"СравнитьВерсии",0,0,"","Функция СравнитьВерсии(ВерсияНовая,ВерсияСтарая)
	Рез = 0; //  0 - ВерсияНовая = ВерсияСтарая
			 //  1 - ВерсияНовая > ВерсияСтарая
			 // -1 - ВерсияНовая < ВерсияСтарая
	Отказ = Ложь;
	Для Позиция = 1 По СтрДлина(ВерсияНовая) Цикл
		Если СтрНайти(Сред( (ВерсияНовая, Позиция, 1 ),""0123456789."") = 0  Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Сравнение версий: Неверный формат ВерсияНовая'"");
			Сообщение.Сообщить();
			Отказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Для Позиция = 1 По СтрДлина(ВерсияСтарая) Цикл
		Если СтрНайти(Сред( ВерсияСтарая, Позиция, 1),""0123456789."") = 0  Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Сравнение версий: Неверный формат ВерсияСтарая'"");
			Сообщение.Сообщить(); 
			Отказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Если Отказ Тогда
	    Возврат Рез;
	КонецЕсли; 
			 
	МассивНовый  = СтрРазделить(ВерсияНовая,""."");
	МассивСтарый = СтрРазделить(ВерсияСтарая,""."");
	ВГраница =  Мин( МассивНовый.ВГраница(),МассивСтарый.ВГраница());
	
	Для Индекс = 0 По ВГраница Цикл
		ЗначНов  = Число(МассивНовый [Индекс]);
		ЗначСтар = Число(МассивСтарый [Индекс]); 
	    Если ЗначНов > ЗначСтар Тогда
			Рез = 1;
			Прервать;
		ИначеЕсли ЗначНов < ЗначСтар  Тогда  
			Рез = -1;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Рез;
	
КонецФункции
"}
},
{0,
{"УдалениеДвижений",0,0,"","Процедура УдалитьДвиженияДокумента(ДокументСсылка) Экспорт 
	
	МД = ДокументСсылка.Метаданные().Движения;
	
	Для каждого РегистрДвижения Из МД Цикл
		НаименованиеРегистра = РегистрДвижения.ПолноеИмя();
		Если СтрНачинаетсяС(НаименованиеРегистра,""РегистрСведений"") Тогда
			НЗ = РегистрыСведений[РегистрДвижения.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрНачинаетсяС(НаименованиеРегистра,""РегистрНакопления"") Тогда  
			НЗ = РегистрыНакопления[РегистрДвижения.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрНачинаетсяС(НаименованиеРегистра,""РегистрБухгалтерии"") Тогда  
			НЗ = РегистрыБухгалтерии[РегистрДвижения.Имя].СоздатьНаборЗаписей();
		КонецЕсли; 
		НЗ.Отбор.Регистратор.Значение = ДокументСсылка;
		НЗ.Записать(Истина);
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"ТолькоЦифры",0,0,"","Функция ТолькоЦифры(ПроверяемаяСтрока)
	Результат = Истина;
	Для Индекс = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
	    Если Найти(Сред(ПроверяемаяСтрока,Индекс,1),""0123456789"") = 0 Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Результат;
КонецФункции // ТолькоЦифры(ПроверяемаяСтрока) "}
},
{0,
{"РазложитьСтроку",0,0,"","// Функция ""расщепляет"" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок("",строка 1,,,строка 2"", "","") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок("" строка1   строка 2"", "" "") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = "","")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = "" "" Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
"}
},
{0,
{"ПараметрыИзСтруктуры",0,0,"",""}
},
{0,
{"СтруктураИзДанных",0,0,"","// Из данных Структура, СтрокаТЗ или ВыборкаЗапроса или... создается структура с ключами -колонками и соответствующими значениями
// 
Функция СтруктураИзДанных(Данные, СписокСвойств = """", ИсключаяСвойства = """")
	Результат = Новый Структура(); 
	МассивНеПодставляемых = СтрРазделить(ИсключаяСвойства, "","", Ложь);
	МассивСвойств = СтрРазделить(СписокСвойств, "","", Ложь);
	Если ТипЗнч(Данные) = Тип(""СтрокаТаблицыЗначений"") Тогда 
		ТЗДанные = Данные.Владелец();
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивСвойств.Количество() > 0 Тогда
			    Если МассивСвойств.Найти(Колонка.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			Если МассивНеПодставляемых.Найти(Колонка.Имя)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Колонка.Имя, Данные[Колонка.Имя]);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""ВыборкаИзРезультатаЗапроса"") Тогда
		ТЗДанные = Данные.Владелец();
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивСвойств.Количество() > 0 Тогда
			    Если МассивСвойств.Найти(Колонка.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			Если МассивНеПодставляемых.Найти(Колонка)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Колонка, Данные[Колонка]);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""Структура"") Тогда 
		Для каждого Элемент Из Данные Цикл
			Если МассивСвойств.Количество() > 0 Тогда
			    Если МассивСвойств.Найти(Элемент.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			Если МассивНеПодставляемых.Найти(Элемент.Ключ)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции // СтруктураИзДанных()
"}
},
{0,
{"ЗаменитьИзДанных",0,0,"","// замена в строке %Параметр% на значания параметров заданных в Структуре (параметр -ключ структуры),
//      СтрокаТаблицы значений (параметр - Имя колонки)
// данные - структура, строка таблицы значений, выборка
// СимволВыделения  - обрамление параметра в тексте шаблона
// НеПодставляемые - список через запятую, которые не подставляются, например ""ДатаДок,Контрагент""
//
Функция ЗаменитьИзДанных(СтрокаТекста, Данные, Знач СимволВыделения = ""%"", НеПодставляемые = """")
 	НоваяСтрока = СтрокаТекста;
	МассивНеПодставляемых = СтрРазделить(НеПодставляемые, "","", Ложь);

	Если ТипЗнч(Данные) = Тип(""Структура"") Тогда
		#Если Сервер И НЕ Сервер Тогда  // < удалить
			Данные = Новый Структура() ;
		#КонецЕсли // удалить > 
		Для каждого Элемент  Из Данные Цикл
			Если МассивНеПодставляемых.Найти(Элемент.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = СтрЗаменить(НоваяСтрока, СимволВыделения + Элемент.Ключ+ СимволВыделения, Элемент.Значение);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""СтрокаТаблицыЗначений"")  Тогда 
		ТЗДанные = Данные.Владелец();
	    #Если Сервер И НЕ Сервер Тогда  // < удалить
			ТЗДанные = Новый ТаблицаЗначений;
		#КонецЕсли // удалить >
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивНеПодставляемых.Найти(Колонка.Имя)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СтрЗаменить(НоваяСтрока,СимволВыделения + Колонка.Имя + СимволВыделения, Данные[Колонка.Имя])
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""ВыборкаИзРезультатаЗапроса"") Тогда
		ТЗДанные = Данные.Владелец();
	    #Если Сервер И НЕ Сервер Тогда  // < удалить
		
		#КонецЕсли // удалить >
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивНеПодставляемых.Найти(Колонка)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СтрЗаменить(НоваяСтрока,СимволВыделения + Колонка + СимволВыделения, Данные [Колонка])
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат НоваяСтрока;
	
КонецФункции // ЗаменитьИзДанных(СтрокаТекста, СтрокаТЗ)()
"}
},
{0,
{"ОбластьТабДок",0,0,"","// объединяются ячейки табличного документа и в них выводиться текст
	ОбластьШтампа = Извещение.Область(""R1C2:R10C6"");
	ОбластьШтампа.Объединить();
	ОбластьШтампа.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьШтампа.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьШтампа.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьШтампа.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьШтампа.Шрифт = Новый Шрифт (ОбластьШтампа.Шрифт, ,8);
	ОбластьШтампа.Текст = ТекстШтампа(ПараметрыМакета,ДатаОтчета);
"}
},
{0,
{"ОбработкаФайлаНаСервере",0,0,"","// помещаем в хранилище
&НаКлиенте
Процедура СравнитьСФайломНаКлиенте()
	 //АдресХранилища = ПоместитьВоВременноеХранилище(Объект.ИмяФайлаТаблицы);
	 ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ОбработатьФайлЗавершение"", ЭтотОбъект);
	 НачатьПомещениеФайлаНаСервер(ОписаниеОповещенияОЗавершении,,,,Объект.ИмяФайлаТаблицы,ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры // СравнитьСФайломНаКлиенте()
 
&НаКлиенте 
Процедура ОбработатьФайлЗавершение(ОписаниеПомещенногоФайла,ДополнительныеПраметры) Экспорт 
	Если ОписаниеПомещенногоФайла = Неопределено ИЛИ ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли; 
	
	СравнитьСФайломНаСервереВХранилище(ОписаниеПомещенногоФайла.Адрес);
	ЭтаФорма.ТекущийЭлемент = Элементы.ТабДок;
КонецПроцедуры

// помещаем во временный файл на сервере
&НаСервере
Процедура СравнитьСФайломНаСервереВХранилище(Адрес)
   Данные = ПолучитьИзВременногоХранилища(Адрес);
   ИмяПромежуточногоФайла = ПолучитьИмяВременногоФайла(""txt""); // до конца сеанса
   Данные.Записать(ИмяПромежуточногоФайла);
   ВыполнитьСравнениеНаСервере (ИмяПромежуточногоФайла);
КонецПроцедуры
 
"}
}
},
{3,
{"Комментарии",1,0,"",""},
{0,
{"рефакторинг",0,0,"/реф","//@рефакторинг"}
},
{0,
{"TODO",0,0,"/сдел","//TODO - <?""Что сделать?"">"}
},
{0,
{"Версия",0,0,"/вер","//  1.0.0.1  -  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> - <что сделано>"}
}
},
{1,
{"Отладка",1,0,"",""},
{0,
{"ПолучитьВТ",0,0,"","// Функция - Получить ВТ
//
// Параметры:
//  МВТ			 - Менеджер временных таблиц	 - 
//  ИмяТаблицы	 - Строка	 -  Имя таблицы получения данных
// 
// Возвращаемое значение:
//   - 
//
&НаСервере
Функция ПолучитьВТ(МВТ, ИмяТаблицы)
	Если МВТ.Таблицы.Найти(ИмяТаблицы) = Неопределено Тогда
		Возврат ""Таблица '"" + ИмяТаблицы + ""' - не найдена""
	Иначе
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МВТ;
		//Запрос.Выполнить();
		Запрос.Текст=""ВЫБРАТЬ * из "" + ИмяТаблицы;
		ТзПередано=Запрос.Выполнить().Выгрузить();	
		Возврат ТзПередано;
	КонецЕсли; 
КонецФункции // ПолучитьВТ()

"}
}
},
{1,
{"ТекстыЗапросов",1,0,"",""},
{0,
{"СоздатьТаблицуДанных",0,0,"","ВЫБРАТЬ
	1 КАК Поле1,
	""Справочник"" КАК Поле2
ПОМЕСТИТЬ ВТ_НашиДанные
ОБЪЕДИНИТЬ ВСЕ
ВЫБРАТЬ
	2,
	""Документ""
ОБЪЕДИНИТЬ ВСЕ
ВЫБРАТЬ
	3,
	""Константа""
;
////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_НашиДанные.Поле1 КАК Поле1,
	ВТ_НашиДанные.Поле2 КАК Поле2
ИЗ
	ВТ_НашиДанные КАК ВТ_НашиДанные
ГДЕ
	ВТ_НашиДанные.Поле1 = &Поле1"}
}
},
{1,
{"ОбычныеФормы",1,0,"",""},
{0,
{"ОформлениеСтрок",0,0,"","Процедура гвк_ПолучитьОформлениеСтрок(ОформленияСтрок)
	//ТипНомерСтроки = Новый Массив;
	//ТипНомерСтроки.Добавить(Новый КвалификаторыЧисла(6));
	//ТипКоличество = Новый Массив;
	//ТипКоличество.Добавить(Новый КвалификаторыЧисла(10,4));
	ТЗТовары = Новый ТаблицаЗначений;
	ТЗТовары.Колонки.Добавить(""НомерСтроки"",Новый ОписаниеТипов(""Число"",Новый КвалификаторыЧисла(6)));
	ТЗТовары.Колонки.Добавить(""Номенклатура"",Новый ОписаниеТипов(""СправочникСсылка.Номенклатура""));
	ТЗТовары.Колонки.Добавить(""ХарактеристикаНоменклатуры"",Новый ОписаниеТипов(""СправочникСсылка.ХарактеристикиНоменклатуры""));
	ТЗТовары.Колонки.Добавить(""Количество"",Новый ОписаниеТипов(""Число"",Новый КвалификаторыЧисла(10,4)));
	Для Индекс = 0 По ОформленияСтрок.Количество()- 1 Цикл
		СтрокаОформления = ОформленияСтрок [Индекс];   
		СтрокаТЗТовары = ТЗТовары.Добавить();
		СтрокаТЗТовары.НомерСтроки = Индекс;
		СтрокаТЗТовары.Номенклатура = СтрокаОформления.ДанныеСтроки.Номенклатура;
		СтрокаТЗТовары.ХарактеристикаНоменклатуры = СтрокаОформления.ДанныеСтроки.ХарактеристикаНоменклатуры;
		СтрокаТЗТовары.Количество = СтрокаОформления.ДанныеСтроки.Количество;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ТЗ_Товары.НомерСтроки,
		|	ТЗ_Товары.Номенклатура КАК Номенклатура,
		|	ТЗ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТЗ_Товары.Количество
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТЗ_Товары КАК ТЗ_Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиЗаказа
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(
		|			,
		|			ЗаказПокупателя = &ЗаказПокупателя
		|				И (Номенклатура, ХарактеристикаНоменклатуры) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК ЗаказыПокупателейОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры,
		|	СУММА(ВЫБОР
		|			КОГДА &ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				ТОГДА ВТ_Товары.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Склад В
		|					(ВЫБРАТЬ
		|						Константы.гвк_ОсновнойСклад
		|					ИЗ
		|						Константы КАК Константы)
		|				И (Номенклатура, ХарактеристикаНоменклатуры) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК ТоварыНаСкладахОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) = 0
		|			ТОГДА """"Зеленый""""
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) < 0
		|			ТОГДА """"Синий""""
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) <= ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0)
		|			ТОГДА """"Белый""""
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) > 0
		|				И ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) = 0
		|			ТОГДА """"Красный""""
		|		ИНАЧЕ """"Желтый""""
		|	КОНЕЦ КАК Цвет
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиЗаказа КАК ВТ_ОстаткиЗаказа
		|		ПО ВТ_Товары.Номенклатура = ВТ_ОстаткиЗаказа.Номенклатура
		|			И ВТ_Товары.ХарактеристикаНоменклатуры = ВТ_ОстаткиЗаказа.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		|		ПО ВТ_Товары.Номенклатура = ВТ_Остатки.Номенклатура
		|			И ВТ_Товары.ХарактеристикаНоменклатуры = ВТ_Остатки.ХарактеристикаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"";
	
	Запрос.УстановитьПараметр(""ЗаказПокупателя"", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр(""ТЗ_Товары"", ТЗТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	//Для каждого СтрокаОформления Из ОформленияСтрок Цикл
	Для Индекс = 0 По ОформленияСтрок.Количество()- 1 Цикл
		//СтруктураПоиска = Новый Структура(""НомерСтроки"", СтрокаОформления.ДанныеСтроки.КлючСтроки );
		СтрокаОформления = ОформленияСтрок [Индекс];   
		СтруктураПоиска = Новый Структура(""НомерСтроки"", Индекс );
		ВыборкаДетальныеЗаписи.Сбросить();
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураПоиска) Тогда
		    Если ВыборкаДетальныеЗаписи.Цвет = ""Зеленый"" Тогда
				СтрокаОформления.ЦветФона = Новый Цвет(128,255,128)
			ИначеЕсли ВыборкаДетальныеЗаписи.Цвет = ""Белый"" Тогда 	
				СтрокаОформления.ЦветФона = Новый Цвет(255,255,255)
			ИначеЕсли ВыборкаДетальныеЗаписи.Цвет = ""Красный"" Тогда 	
				СтрокаОформления.ЦветФона = Новый Цвет(255,128,128)
			ИначеЕсли ВыборкаДетальныеЗаписи.Цвет = ""Синий"" Тогда 	
				СтрокаОформления.ЦветФона = Новый Цвет(128,128,255)
			Иначе // желтый
				СтрокаОформления.ЦветФона = Новый Цвет(255,255,128)
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
"}
}
}
}
}