{1,
{14,
{"ГВК_Шаблоны",1,0,"",""},
{10,
{"ОблегчениеИОформление",1,0,"",""},
{0,
{"Шапка",0,0,"","//-------------------------------------------------------------------------------------------------------
//
//
//
// ГВК   gvk@gvk-it.ru     gvk-it.ru
//-------------------------------------------------------------------------------------------------------"}
},
{0,
{"ЗаголовокКоментарий",0,0,"///","///////////////////////////////////////////////////////////////////////////////////////////////////////
// <?>
"}
},
{0,
{"СтрокаИстории",0,0,"СтрИст","// <?""Версия"">  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">  <?>
"}
},
{0,
{"ДляУдаления",0,0,"удл","#Если Сервер И НЕ Сервер Тогда  // < удалить
	<?>
#КонецЕсли // удалить >"}
},
{0,
{"начконизм",0,0,"гвк","//изм ГВК <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Номер трекера""> {
<?>
// ГВК <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Номер трекера""> }"}
},
{0,
{"МодульФормыСтандарт",0,1,"","#Область ОбработчикиСобытийФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Код процедур и функций
#КонецОбласти"}
},
{0,
{"ЗначениеЗаполнено",0,0,"зз","ЗначениеЗаполнено(<?>)"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"ззс","ЗаполнитьЗначенияСвойств (<?""Приемник"">,<?""Источник"">);"}
},
{0,
{"ДобавитьВНаборЗаписей",0,0,"ДобавитьВНЗ","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборзаписей();
НаборЗаписей.Отбор.Свойство.Установить(СтароеСвойство);
НаборЗаписей.Отбор.Значение.Установить(ИД);
ЗаписьРегистра = НаборЗаписей.Добавить();
ЗаписьРегистра.Объект = Объект;
НаборЗаписей.Записать();"}
},
{0,
{"NULL",0,0,"ТГДД","NULL"}
}
},
{23,
{"Управляемые формы",1,0,"",""},
{0,
{"ПолучитьЗначениеРеквизита",0,0,"","&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)

	Рез = Неопределено;
	Попытка
	    Рез = СсылкаНаОбъект[ИмяРеквизита]; 
	Исключение
	
	КонецПопытки; 
		
	Возврат Рез;

КонецФункции // ПолучитьЗначениеРеквизита()
 "}
},
{0,
{"ПолучитьРеквизитыНаСервере",0,0,"","&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыНаСервере(ОбъектСсылка, Реквизиты)
 	
	ЗаполнитьЗначенияСвойств(Реквизиты, ОбъектСсылка);	

КонецПроцедуры
"}
},
{0,
{"НаСервереБезКонтекста",0,1,"?насерб","&НаСервереБезКонтекста"}
},
{0,
{"НаСервере",0,1,"?насер","&НаСервере"}
},
{0,
{"НаКлиенте",0,1,"?накл","&НаКлиенте"}
},
{0,
{"УстановитьАвтоТест",0,1,"автотест","	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
"}
},
{0,
{"УстановкаПараметра",0,0,"УстПар","Параметр<?""Параметр""> = Неопределено;
Если Параметры.Свойство (""<?""Параметр"">"", Параметр<?""Параметр"">) Тогда
	<?""Параметр""> = Параметр<?""Параметр"">;
КонецЕсли;
"}
},
{0,
{"СообщениеГВК",0,0,"Сооб[щение]","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = НСтр(""ru = '<?>'"");
Сообщение.Поле = """";
Сообщение.УстановитьДанные();
Сообщение.Сообщить();"}
},
{0,
{"НовыйОтборСписка",0,0,"","ЭлементОтбора = <?""ИмяСписка"">.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(""<?""ИмяОтбора"">"");
ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование  = Истина;
ЭлементОтбора.ПравоеЗначение = <?""ИмяОтбора"">;
ЭлементОтбора.Представление  = ""<?""ИмяОтбора"">"";
"}
},
{0,
{"ПредопределенноеЗначение",0,0,"ПЗ","ПредопределенноеЗначение (""<?>"");"}
},
{0,
{"ДобавитьКомандуВКонтекстноеМеню",0,0,"","// на сервере
    Команда = Команды.Добавить(""<?""Команда"">"");
    Команда.Действие = ""ОбработчикКоманды<?""Команда"">"";
    Команда.Заголовок = ""<?""КомандаЗаголовок"">"";
    НовыйЭлемент = Элементы.Добавить(""Кнопка<?""Команда"">"", Тип(""КнопкаФормы""), Элементы.<?>);
	НовыйЭлемент.ИмяКоманды = ""<?""Команда"">"";
// перенести в модуль формы	
//&НаКлиенте
//Процедура ОбработчикКоманды<?""Команда"">(Команда)
//    // алгоритм команды
//КонецПроцедуры"}
},
{0,
{"ВставитьПолеВвода",0,0,"","НовыйЭлемент = Элементы.Добавить(""<?""ИмяЭлемента"">"", Тип(""ПолеФормы""), Элементы[""<?""Родитель"">""], Элементы[""<?""ПредшествЭлемент"">""] );
НовыйЭлемент.ПутьКДанным = ""<?""ИмяЭлемента"">"";
НовыйЭлемент.Заголовок = ""<?""ИмяЭлемента"">"";
НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
//НовыйЭлемент.УстановитьДействие(""ПриИзменении"",""<?""ИмяЭлемента"">ПриИзменении"" );"}
},
{0,
{"ДобавитьТабличнуюЧасть",0,0,"","НовыйЭлемент = Элементы.Добавить(""<?""ИмяТЧ"">"", Тип(""ТаблицаФормы""), Элементы[""<?""ГруппаКудаВставить"">""]);
НовыйЭлемент.ПутьКДанным = ""Объект.БюджетФакт"";
НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
НовыйЭлемент.РежимВыбора = Ложь;
//НовыйЭлемент.КоманднаяПанель
//НовыйЭлемент.КонтекстноеМеню"}
},
{0,
{"ДобавитьЭлементТЧ",0,0,"","НовыйЭлемент = Элементы.Добавить(""<?""ИмяТЧ"">""+""<?""ИмяЭлемента"">"", Тип(""ПолеФормы""), Элементы[""<?""ИмяТЧ"">""] );
НовыйЭлемент.ПутьКДанным = ""Объект.<?""ИмяТЧ"">.<?""ИмяЭлемента"">"";
НовыйЭлемент.Заголовок = ""<?""ИмяЭлемента"">"";
НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
//НовыйЭлемент.УстановитьДействие(""ПриИзменении"",""<?""ИмяЭлемента"">ПриИзменении"" );"}
},
{0,
{"ДобавитьРеквизитТЧ",0,0,"","	// Добавить реквизит в табличную часть на управляемую форму. в ПриСозданииНаСервере
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип(""Строка""));
	ТипыРеквизита.Добавить(Тип(""Дата""));
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита,,,,
		Новый КвалификаторыСтроки(100),
		Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
	НовыйРеквизит = Новый РеквизитФормы(""ЗначениеПараметра"",  // имя
		ОписаниеТиповДляРеквизита,                      // тип
		""Объект.ПараметрыЗапросов"",   // путь
		""Значение параметра"",                           // заголовок
		Ложь);                                          // сохраняемые данные
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	// Добавить элемент формы и связать его с реквизитом.
	НовыйЭлемент = Элементы.Добавить(""ПараметрыЗапросовЗначениеПараметра"", Тип(""ПолеФормы""), Элементы.ПараметрыЗапросов);
	НовыйЭлемент.ПутьКДанным = ""Объект.ПараметрыЗапросов.ЗначениеПараметра"";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.КнопкаОчистки = Истина;
	
"}
},
{0,
{"ДобавитьРеквизитНаУФ",0,0,"","	// Добавить реквизит на управляемую форму. в ПриСозданииНаСервере
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип(""Строка""));
	ТипыРеквизита.Добавить(Тип(""Дата""));
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита,,,,
		Новый КвалификаторыСтроки(100),
		Новый КвалификаторыДаты(ЧастиДаты.Дата));
		
	НовыйРеквизит = Новый РеквизитФормы(""<?""ИмяРеквизита"">"",  // имя
		ОписаниеТиповДляРеквизита,                      // тип
		""<?""ПутьДанных"">"",   // путь
		""<?""ИмяРеквизита"">"",                           // заголовок
		Ложь);                                          // сохраняемые данные
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	// Добавить элемент формы и связать его с реквизитом.
	НовыйЭлемент = Элементы.Добавить(""<?""ИмяРеквизита"">"", Тип(""ПолеФормы""), Элементы.ПараметрыЗапросов);
	НовыйЭлемент.ПутьКДанным = ""<?""ПутьДанных"">"";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.КнопкаОчистки = Истина;
	НовыйЭлемент.УстановитьДействие(""ПриИзменении"",""ПараметрыЗапросовЗначениеПараметраПриИзменении"");
	
"}
},
{0,
{"ДобавитьГруппуНаУФ",0,0,"","	НовыйЭлемент = Элементы.Добавить(""<?""ИмяГруппы"">"", Тип(""ГруппаФормы""), Элементы.<?""ГруппаКудаДобавить"">);
	НовыйЭлемент.Вид           = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Заголовок = """";
	НовыйЭлемент.Отображение =  ОтображениеОбычнойГруппы.СильноеВыделение;
	НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НовыйЭлемент.ОтображатьЗаголовок = Ложь;
"}
},
{0,
{"ПроверкаНового",0,0,"ПроверитьНовый","    Если Параметры.Ключ.Пустая() Тогда
      //Сообщить(""Создается новый объект"");
    КонецЕсли;
"}
},
{0,
{"ПроверитЗаполнение",0,0,"","// проверить заполнение полей с выдачей сообщений
"}
},
{0,
{"ПоместитьФайлНаСервер",0,0,"","&НаСервере
Процедура гвк_СформироватьДБФ_НаСервере()

	Если АдресФайлаНаСервере = """" Тогда
        Сообщить(""Сначала нужно передать файл с клиента на сервер."");
        Возврат;
    КонецЕсли;
 
    ДвоичныеДанные = 
        ПолучитьИзВременногоХранилища(АдресФайлаНаСервере);
 
    Если ДвоичныеДанные = Неопределено Тогда
        Сообщить(""Похоже файл уже был удалён из хранилища."");
        Возврат;
    КонецЕсли;
    
	ПолныйПутьФайлаНаСервере =  КаталогВременныхФайлов() +  ПолучитьРазделительПути() + ""apteka.dbf"";
	
	ДвоичныеДанные.Записать(ПолныйПутьФайлаНаСервере);

КонецПроцедуры // 	гвк_ЗагрузитьДанные()

&НаКлиенте
Процедура ПоместитьФайлНаСервер(Команда)
    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
    ПараметрыДиалога.Заголовок = ""НачатьПомещениеФайлаНаСервер"";
    ПараметрыДиалога.МножественныйВыбор = Истина;
    ПараметрыДиалога.Фильтр = ""ДБФ файл|*.dbf|Все файлы|*.*"";
    ЗавершениеОбратныйВызов = Новый ОписаниеОповещения(""ЗавершениеОбратныйВызов"", ЭтотОбъект);
    ПрогрессОбратныйВызов = Новый ОписаниеОповещения(""ПрогрессОбратныйВызов"", ЭтотОбъект);
    ПередНачалоОбратныйВызов = Новый ОписаниеОповещения(""ПередНачалоОбратныйВызов"", ЭтотОбъект);
    НачатьПомещениеФайлаНаСервер(ЗавершениеОбратныйВызов, ПрогрессОбратныйВызов, ПередНачалоОбратныйВызов, , ПараметрыДиалога, ЭтаФорма.УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеОбратныйВызов(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
    Сообщить(""Помещение файла "" + ?(ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено, ""на сервер отменено"", ""на сервер выполнено успешно""));
	//Сообщить(""Адрес во временном хранилище: "" + ОписаниеПомещенногоФайла.Адрес);
	//Сообщить(""Имя файла: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
	//Сообщить(""Размер файла, байт: "" + ОписаниеПомещенногоФайла.СсылкаНаФайл.Размер());
	Если ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		ПолныйПутьФайлаНаСервере = """";
	Иначе
		АдресФайлаНаСервере = ОписаниеПомещенногоФайла.Адрес;
		гвк_СформироватьДБФ_НаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбратныйВызов(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    Состояние(""Файл "" + ПомещаемыйФайл.Имя, Помещено, ""Файл имеет размер "" + ПомещаемыйФайл.Размер() + "" байт"", БиблиотекаКартинок.Документ);
КонецПроцедуры

&НаКлиенте
Процедура ПередНачалоОбратныйВызов(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    //Сообщить(""Помещаемый файл - "" + ПомещаемыйФайл.Имя + "", размер = "" + ПомещаемыйФайл.Размер());
	ИмяФайлаДанных = ПомещаемыйФайл.Файл.ПолноеИмя;
КонецПроцедуры
"}
},
{0,
{"ОбработатьФайлНаСервере",0,0,"","// помещаем в хранилище
&НаКлиенте
Процедура <?""ИмяКоманды"">(Команда)
	ДополнительныеПараметры = Новый Структура (""Команда"",Команда.Имя);
	Если СтрРазделить(ИмяФайла,""."").Количество() > 1 Тогда
		ДополнительныеПараметры.Вставить(""РасширениеФайла"",СтрРазделить(ИмяФайла,""."")[СтрРазделить(ИмяФайла,""."").Количество()-1] );
	КонецЕсли; 
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""<?""ИмяКоманды"">Завершение"", ЭтотОбъект,ДополнительныеПараметры );
	НачатьПомещениеФайлаНаСервер(ОписаниеОповещенияОЗавершении,,,,<?""РеквизитИмяФайла"">,ЭтотОбъект.УникальныйИдентификатор);
КонецПроцедуры // СравнитьСФайломНаКлиенте()
 
&НаКлиенте 
Процедура <?""ИмяКоманды"">Завершение(ОписаниеПомещенногоФайла,ДополнительныеПараметры) Экспорт 
	Если ОписаниеПомещенногоФайла = Неопределено ИЛИ ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		Возврат;
	КонецЕсли; 
	<?""ИмяКоманды"">НаСервере(ОписаниеПомещенногоФайла.Адрес,ДополнительныеПараметры);
КонецПроцедуры

// помещаем во временный файл на сервере
&НаСервере
Процедура <?""ИмяКоманды"">НаСервере(Адрес,ДополнительныеПараметры)
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	РасширениеФайла = ""txt"";
	Если НЕ ДополнительныеПараметры.Свойство(""РасширениеФайла"",РасширениеФайла) Тогда
		РасширениеФайла = ""txt"";
	КонецЕсли; 
	ИмяПромежуточногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла); // до конца сеанса
	Данные.Записать(ИмяПромежуточногоФайла);
	Команда = """";
	Если ДополнительныеПараметры.Свойство(""Команда"",Команда) Тогда
		Если Команда = ""<?""ИмяКоманды"">"" Тогда
            // алгоритм команды
			<?>
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры
 
"}
},
{0,
{"ПереносФайловВДиректориюНаКлиенте",0,0,"","// фрагмент для помещения нескольких файлов созданных на сервере в директорию на клиенте
// с разными верификациями

&НаКлиенте
Процедура <?""РеквизитПапкаВыгрузки"">ОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	<?""РеквизитПапкаВыгрузки""> = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура <?""РеквизитПапкаВыгрузки"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; // ???
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	//Фильтр = НСтр(""ru = 'xls'; en = 'xls'"")
	//+ ""(*.xls)|*.xls"";
	//ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""РеквизитПапкаВыгрузки"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите папку"";
	ОписаниеОповещение = Новый ОписаниеОповещения(<?""РеквизитПапкаВыгрузки""> + ""ОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры

&НаКлиенте
Процедура <?""РеквизитПапкаВыгрузки"">Открытие(Элемент, СтандартнаяОбработка)
	ЗапуститьПриложение(<?""РеквизитПапкаВыгрузки"">,,Ложь,);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбработкаВопросаПродолжения(РезультатВопроса,ДопПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПродолжитьВыгрузить();
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПустая(ФайлыПапки, ДопПараметры ) Экспорт 
	Если ФайлыПапки.Количество() = 0 Тогда
		ПродолжитьВыгрузить();
	Иначе
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ОбработкаВопросаПродолжения"", ЭтотОбъект);
		ТекстВопроса = НСтр(""ru = 'Папка не пустая. Продолжить?'"");
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ,);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЭтоКаталог(ЭтоКаталог, ДопПараметры) Экспорт 
	Если ЭтоКаталог Тогда
		НачатьПоискФайлов(Новый ОписаниеОповещения(""ПапкаПустая"",ЭтотОбъект),<?""РеквизитПапкаВыгрузки"">,""*.*"",Ложь);
	Иначе
		ПоказатьПредупреждение(,""Указанная папка не является папкой!"");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКаталогСуществует(Существует,ДопПараметры) Экспорт 
	Если Существует Тогда
		ФайлПапкаВыгрузки.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения (""ПроверкаЭтоКаталог"",ЭтотОбъект));
	Иначе
		ПоказатьПредупреждение(,""Папка для выгрузки файлов не существует!"");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(<?""РеквизитПапкаВыгрузки"">) Тогда
		ПоказатьПредупреждение(,""Не выбрана директория(папка) для формирования файлов!"");
	Иначе
		ФайлПапкаВыгрузки = Новый Файл (<?""РеквизитПапкаВыгрузки"">);
		ФайлПапкаВыгрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения(""ПроверкаКаталогСуществует"",ЭтотОбъект));
	КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура ПродолжитьВыгрузить()
	ВыгрузитьНаСервере();
	//изм ГВК 20.11.2020 003 {
	// получить файлы на клиенте
	МассивОписаний = Новый Массив;
	Для каждого СтрокаТЧ из Объект.СписокФайлов Цикл
		Описание = Новый ОписаниеПередаваемогоФайла(<?""РеквизитПапкаВыгрузки""> + ""\""+СтрокаТЧ.Путь,СтрокаТЧ.Адрес);
		МассивОписаний.Добавить(Описание);
	КонецЦикла;
	ОписаниеОповещения = Новый ОписаниеОповещения (""ЗавершениеПолученияФайлов"",ЭтаФорма);
	НачатьПолучениеФайлов(ОписаниеОповещения ,МассивОписаний,,Ложь);
	// ГВК 20.11.2020 003 } 
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = """"; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = ""Выберите каталог""; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		<?""РеквизитПапкаВыгрузки""> = ДиалогОткрытия.Каталог; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПолученияФайлов(ПолученныеФайлы,ДополнительныеПараметры) Экспорт
    Если ПолученныеФайлы.Количество() = Объект.СписокФайлов.Количество() Тогда
		Сообщить(""Все файлы получены!!!"");
	Иначе
		Сообщить(""!!! Не все файлы получены !!!"");
	КонецЕсли; 

КонецПроцедуры // ЗавершениПолученияФайлов()

&НаСервере
Функция ВыгрузитьНаСервере()             
	Сообщить(""Выгрузка в каталог :"" + КаталогВременныхФайлов());
			
	СписокФайлов = Новый ТаблицаЗначений;
	СписокФайлов.Колонки.Добавить(""Путь"");	 // имя файла в целевой директории
	СписокФайлов.Колонки.Добавить(""ВременныйФайл"");	
	СписокФайлов.Колонки.Добавить(""Адрес"");	
	// алгоритм создания файла
	КаталогВременныхФайловНаСервере = КаталогВременныхФайлов();
	ИмяФайла =  <?""ИмяФайлаШаблон"">;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(""xls"");
	//ТабДок.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента.XLS);
	СтрокаТЧ = Объект.СписокФайлов.Добавить();
	Двоичное = Новый ДвоичныеДанные(ИмяВременногоФайла);
	Адрес = ПоместитьВоВременноеХранилище(Двоичное);
	СтрокаТЧ.Путь = ИмяФайла;
	СтрокаТЧ.ВременныйФайл = ИмяВременногоФайла;
	СтрокаТЧ.Адрес = Адрес;
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат СписокФайлов;		
КонецФункции 

#КонецОбласти
"}
},
{0,
{"ПерейтиНаСайтГВК",0,0,"","ЗапуститьПриложение(""http://gvk-it.ru"");"}
}
},
{7,
{"НовыеДиалоги",1,0,"",""},
{0,
{"ВопросДаНет",0,0,"ВопросДаНет","&НаКлиенте
Процедура ОбработкаВопросаОчистки(РезультатВопроса,ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 	

КонецПроцедуры
 

&НаКлиенте
Процедура <?""ИмяПроцедуры"">()
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ОбработкаВопросаОчистки"", ЭтотОбъект);
	ТекстВопроса = НСтр(""ru = 'Таблица заказов будет очищена. Продолжить?'"");
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ,);
	
КонецПроцедуры
"}
},
{0,
{"НемодальныйВызов",0,0,"","
	ДопПараметры = Новый Структура(); 
	ОписаниеОповещенияОСобытии = Новый ОписаниеОповещения(""""<?""ИмяОбработкиЗавершения"">"""", ЭтотОбъект, ДопПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВеcьИнтерфейс;
	ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Добавить(Ключ,Значение);
	ОткрытьФорму(<?>,ПараметрыФормы, ЭтотОбъект,Истина,,,ОписаниеОповещенияОСобытии,Режим); 
// переместить ! 	
&НаКлиенте
Процедура <?""ИмяОбработкиЗавершения"">(Результат,ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 	

КонецПроцедуры
"}
},
{0,
{"ВыборДиректории",0,0,"","&НаКлиенте
Процедура <?""Имя реквизита"">ОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	<?""Имя реквизита""> = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура <?""Имя реквизита"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""Имя реквизита"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""<?""Имя реквизита"">ОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ВыборФайла",0,0,"","&НаКлиенте
Процедура <?""Имя реквизита"">ОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	<?""Имя реквизита""> = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура <?""Имя реквизита"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие; // ???
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = НСтр(""ru = '<?""Расширение файла"">'; en = '<?""Расширение файла"">'"")
    + ""(*.<?""Расширение файла"">)|*.<?""Расширение файла"">"";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""Имя реквизита"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите файл"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""<?""Имя реквизита"">ОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ВыборИзСписка",0,0,"ВыборИзСписка","// Событие начало выбора для выбора из своего списка
&НаКлиенте
Процедура <?""ЭлементФормы"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РанееВыбранныйЭлементСписка = <?""СписокВыбора"">.НайтиПоЗначению(<?""ВыбранныйЭлемент"">);
	ОписаниеОповещения = Новый ОписаниеОповещения(""<?""ЭлементФормы"">НачалоВыбораОкончание"",ЭтотОбъект,РанееВыбранныйЭлементСписка);
	<?""СписокВыбора"">.ПоказатьВыборЭлемента(ОписаниеОповещения,""Выберите <...> "", );
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура <?""ЭлементФормы"">НачалоВыбораОкончание(ВыбранныйЭлемент,СписокПараметров)Экспорт 
	Если ВыбранныйЭлемент <> Неопределено Тогда
		<?""ЭлементФормы""> = ВыбранныйЭлемент.Значение;
	КонецЕсли; 
КонецПроцедуры
"}
},
{0,
{"ВвестиЗначение",0,0,"ВводЗнач[ения]","&НаКлиенте
Процедура <?""ИмяПроцедуры""> (Команда)
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(Продолжить<?""ИмяПроцедуры"">,ЭтотОбъект);
	НовыйОбъект = Новый <?"""", ВыборТипа> ;
	ДополннительныеПараметры = Новый Структура;
	ПоказатьВводЗначения(ОписаниеОповещенияОЗавершении,НовыйОбъект,ДополннительныеПараметры);
	ЗаполнениеПоПредыдущимДаннымНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Продолжить<?""ИмяПроцедуры""> (ЗначениеОбъекта, ДополнительныеПараметры)
	
КонецПроцедуры
"}
},
{0,
{"ВыборПериода",0,0,"","//* выбор периода - процедуры команды (на кнопку)
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период = <?""РеквизитПериода"">;
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ПродолжитьВыбратьПериод"",ЭтотОбъект);
	ДиалогПериода.Показать(ОписаниеОповещенияОЗавершении); //,ПериодДокументов,ДополннительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыбратьПериод (ЗначениеПериода, ДополнительныеПараметры) Экспорт 
	Если НЕ ЗначениеПериода = Неопределено Тогда
		<?""РеквизитПериода""> = ЗначениеПериода;
	КонецЕсли; 
КонецПроцедуры
"}
}
},
{4,
{"СКД",1,0,"",""},
{0,
{"ФиксированныеПараметры",0,0,"","// данные объекта

Перем Настройки;
Перем ПараметрДанныхНачалоПериода, ПараметрДанныхКонецПериода, ИменованныйОтбор, УсловноеОформление;

// процедуры модуля объекта

Процедура СформироватьОтчет() Экспорт
	Настройки =	КомпоновщикНастроек.Настройки;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
      
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ЭлементыФормы.Результат.Очистить();
	ДокументРезультат = ЭлементыФормы.Результат;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
КонецПроцедуры


Процедура УстановитьНастройки()
	ДатаНачала = НачалоГода(РабочаяДата);
	ДатаОкончания = КонецМесяца(РабочаяДата);
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
	ПараметрДанныхНачалоПериода.Использование = Истина;

	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1];
	ПараметрДанныхКонецПериода.Значение = ДатаОкончания;
	ПараметрДанныхКонецПериода.Использование = Истина;
	
	ИменованныйОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ИспользованиеОтбора = ИменованныйОтбор.Использование;
	ПредставлениеОтбора = ИменованныйОтбор.Представление;
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы[0];
	ИспользованиеОформления = УсловноеОформление.Использование;
	ПредставлениеОформления = УсловноеОформление.Представление;
	
	ПараметрыВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода;
	ПараметрВыводОтбора = ПараметрыВывода.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных(""ВыводитьОтбор""));
	ПараметрВыводОтбора.Использование = Истина;
	ПараметрВыводОтбора.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ПараметрВыводПараметров = ПараметрыВывода.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных(""ВыводитьПараметрыДанных""));
	ПараметрВыводПараметров.Использование = Истина;
	ПараметрВыводПараметров.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	Настройки = КомпоновщикНастроек.Настройки;
КонецПроцедуры

// процедуры модуля формы
//
Процедура ПриОткрытии()
	СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	УстановитьНастройки();
	СформироватьОтчет();
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
КонецПроцедуры

Процедура ДатаОкончанияПриИзменении(Элемент)
	ПараметрДанныхКонецПериода.Значение = ДатаОкончания;
КонецПроцедуры

Процедура ИспользованиеОтбораПриИзменении(Элемент)
	ИменованныйОтбор.Использование = ИспользованиеОтбора;
КонецПроцедуры

Процедура ИспользованиеОформленияПриИзменении(Элемент)
	УсловноеОформление.Использование = ИспользованиеОформления;
КонецПроцедуры
"}
},
{0,
{"ДобавитьОтбор",0,0,"","Функция ДобавитьОтбор(СписокОтборов, ИмяПоля, Значение, ВидСравнения = Неопределено, Использование = Истина)
    НовыйЭлемент = СписокОтборов.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
    НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
    НовыйЭлемент.ВидСравнения = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
    НовыйЭлемент.ПравоеЗначение = Значение;
    НовыйЭлемент.Использование = Использование;
    Возврат НовыйЭлемент;
КонецФункции"}
},
{0,
{"УдалитьОтбор",0,0,"","Функция УдалитьОтбор(СписокОтборов, ИмяПоля = """")
    Если ПустаяСтрока(ИмяПоля) Тогда
        СписокОтборов.Элементы.Очистить();
        Возврат Истина;
    КонецЕсли;
    Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
    ОтборУдален = Ложь;
    Для каждого ЭлементОтбора Из СписокОтборов.Элементы Цикл
        Если ЭлементОтбора.Использование И ЭлементОтбора.ЛевоеЗначение = Поле Тогда
            СписокОтборов.Элементы.Удалить(ЭлементОтбора);
            ОтборУдален = Истина;
        КонецЕсли;
    КонецЦикла;
    Возврат ОтборУдален;
КонецФункции"}
},
{0,
{"ВыводВТаблицуЗначений",0,0,"","КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
Настройки, , , Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));

ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(ДеревоРезультата);
ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
"}
}
},
{11,
{"ДополнительныеОбработки",1,0,"",""},
{0,
{"ВнешнийОтчетГВК",0,0,"","#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.4"");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = ""1.0.1.1"";
	ПараметрыРегистрации.ОпределитьНастройкиФормы = Истина;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр(""ru = '<?""Представление"">'"");
	НоваяКоманда.Идентификатор = ""ДополнительныйОтчетПолучитьПростойОтчет"";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Настройки общей формы отчета подсистемы ""Варианты отчетов"".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	//Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных(""Период""), Перечисления.ДоступныеПериодыОтчета.Месяц);
	Настройки.ФормироватьСразу = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	КлючВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, ""КлючВарианта"");
	Если КлючВарианта = ""Исключение"" Тогда
		СтандартнаяОбработка = Ложь;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(""ОтчетПустой"", Истина);
		ВызватьИсключение НСтр(""ru = 'Прикладной текст исключения'"");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли"}
},
{0,
{"СведенияОВнешнейОбработке",0,0,"","// парметры внешней обработки как свойства возвращаемой структуры 
// ВерсияБСП = ""2.2.2.0""
// Вид = 
Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<...>(); //
	// «ДополнительнаяОбработка», «ДополнительныйОтчет», «ЗаполнениеОбъекта», «Отчет», «ПечатнаяФорма» или «СозданиеСвязанныхОбъектов»
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
    ПараметрыРегистрации.Версия = ""1.0.1.1"";
    ПараметрыРегистрации.Информация = ""Обработка предназначена ..."";
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<Представление команды>'"");
    Команда.Идентификатор = ""<Имя команды>"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<...>();
    Команда.ПоказыватьОповещение = <Истина/Ложь>;
    Возврат ПараметрыРегистрации; 
КонецФункции
"}
},
{0,
{"ВнешняяПечатнаяФорма",0,0,"","// внешняя печатная форма
Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма(); //
	// «ДополнительнаяОбработка», «ДополнительныйОтчет», «ЗаполнениеОбъекта», «Отчет», «ПечатнаяФорма» или «СозданиеСвязанныхОбъектов»
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
    ПараметрыРегистрации.Версия = ""0.0.0.1"";
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Представление команды"">'"");
    Команда.Идентификатор = ""<?""Имя команды"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
    Возврат ПараметрыРегистрации; 
КонецФункции

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
    ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ""<?""Имя команды"">"");
    Если ПечатнаяФорма <> Неопределено Тогда
        ПечатнаяФорма.ТабличныйДокумент = СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати);
        ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""Представление команды"">'"");
    КонецЕсли;
КонецПроцедуры

Функция СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати)
    ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет(""Макет"");
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
  	Запрос.Текст = """";

	Запрос.УстановитьПараметр(""МассивОбъектов"",МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть(""Заголовок"");
	ОбластьПодвал = Макет.ПолучитьОбласть(""Подвал"");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть(""ШапкаТаблицы"");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть(""ПодвалТаблицы"");
	ОбластьСсылка = Макет.ПолучитьОбласть(""Ссылка"");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть(""Детали"");
	
	ТабДок.Очистить();
	НомерДокумента = 0;
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		Если НомерДокумента > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаСсылка);
		ОбластьСсылка.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
	
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ТабДок.Вывести(ОбластьДетальныхЗаписей);
		КонецЦикла;
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		ТабДок.Вывести(ОбластьСсылка);
		НомерДокумента = НомерДокумента + 1;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьПодвал);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


    Возврат ТабДок;
КонецФункции
	"}
},
{0,
{"ФормаВнешнейПечатнойФормы",0,0,"","// назначить обработчик для команды Печать 
// ДокументСсылка - документ выбранного типа как реквизит обработки

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм
//
&НаСервере
Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить(""ИмяМакета"");
	Макеты.Колонки.Добавить(""ИмяВРЕГ"");
	Макеты.Колонки.Добавить(""СинонимМакета"");
	Макеты.Колонки.Добавить(""ТабличныйДокумент"");
	Макеты.Колонки.Добавить(""Экземпляров"");
	Макеты.Колонки.Добавить(""Картинка"");
	Макеты.Колонки.Добавить(""ПолныйПутьКМакету"");
	Макеты.Колонки.Добавить(""ИмяФайлаПечатнойФормы"");
	
	Если ТипЗнч(ИменаМакетов) = Тип(""Строка"") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, ""ИмяМакета"");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере()
	// Вставить содержимое обработчика.
	ОбъектыСоответствующиеПечатнойФорме = Новый Массив;
	ОбъектыСоответствующиеПечатнойФорме.Добавить(Объект.ДокументСсылка);
	ПараметрыПечати = Новый Структура;
	ОбъектыПечати = Новый СписокЗначений;
	
	ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(""<?""Имя команды"">"");
	ПараметрыОтправки = Новый Структура(""Получатель,Тема,Текст"",Неопределено ,"""","""" ) ;
	ПараметрыВывода = Новый Структура(""ДоступнаПечатьПоКомплектно,ПараметрыОтправки"" ,Ложь,ПараметрыОтправки);
	//				МенеджерПечати.Печать(ОбъектыСоответствующиеПечатнойФорме, ПараметрыПечати, ВременнаяКоллекцияДляОднойПечатнойФормы, ОбъектыПечати, ПараметрыВывода);
	РеквизитФормыВЗначение(""Объект"").Печать(ОбъектыСоответствующиеПечатнойФорме,ВременнаяКоллекцияДляОднойПечатнойФормы,ОбъектыПечати,ПараметрыВывода);
	ТабДок =ВременнаяКоллекцияДляОднойПечатнойФормы[0].ТабличныйДокумент;
	
	Возврат ТабДок;
		
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечатьНаСервере();
	ТабДок.Показать(""Документ"");
	ПечатьНаСервере();
КонецПроцедуры
"}
},
{0,
{"ВыборФайлаПоНовому",0,0,"","&НаКлиенте
Процедура ДиректорияОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Объект.Директория = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура ДиректорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.Директория;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""ДиректорияОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ИзменениеДокументовВВыборке",0,0,"","////////////////////////////////////////////////////////////////////////////////
//
// Процедура ИсправлениеДокументов
//
// Описание: исправление (изменение) документов отобранных запросом
//          В запросе должно быть поле ДокументСсылка...
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ИсправлениеДокументов(ПериодДокументов) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время начало обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	Счетчики = Новый Структура(""Всего,НеЗаблокировано,Изменено,НеПроведено"",0,0,0,0 );
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =  ""<?"""", ТекстЗапроса>"";
	Запрос.УстановитьПараметр(""ДатаНачала"", ПериодДокументов.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", ПериодДокументов.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Счетчики.Всего = ВыборкаДетальныеЗаписи.Количество();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДокументОбъект = ВыборкаДетальныеЗаписи.ДокументСсылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
			Продолжить;
		КонецПопытки;
		// <...изменения документа..>
		// записываем изменения в любом случае, даже если документ не проводится!!!
		Записывать = Истина;
		Если ДокументОбъект.Проведен Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ДокументОбъект);
				Сообщение.Сообщить(); 
				Счетчики.НеПроведено = Счетчики.НеПроведено + 1;
			КонецПопытки; 
		КонецЕсли;
		Если Записывать Тогда
		    Если ДокументОбъект.Проведен Тогда
			    // ошибка при проведении - записываем с отменой
				Режим = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				Режим = РежимЗаписиДокумента.Запись;
			КонецЕсли; 
			Попытка
				ДокументОбъект.Записать(Режим);
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ДокументОбъект);
				Сообщение.Сообщить(); 
			КонецПопытки; 
		КонецЕсли; 
		ДокументОбъект.Разблокировать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Результат обработки: Всего отобрано - '"") + Счетчики.Всего + нСтр(""ru='; изменено - '"", ""ru"") + Счетчики.Изменено  +
						нСтр(""ru='; было недоступно для изменения - '"", ""ru"") + Счетчики.НеЗаблокировано ;
	Сообщение.Сообщить(); 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время окончания обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	
КонецПроцедуры //ИсправлениеДокументов

 "}
},
{0,
{"ИзменениеОбъектаВВыборке",0,0,"","////////////////////////////////////////////////////////////////////////////////
//
// Процедура ИсправлениеОбъектов
//
// Описание: исправление (изменение) документов отобранных запросом
//          В запросе должно быть поле ДокументСсылка...
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ИсправлениеОбъектов(ПериодДокументов) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время начало обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	Счетчики = Новый Структура(""Всего,НеЗаблокировано,Изменено,НеПроведено"",0,0,0,0 );
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =  ""
		<?"""", ТекстЗапроса>"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Счетчики.Всего = ВыборкаДетальныеЗаписи.Количество();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИсправляемыйОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			ИсправляемыйОбъект.Заблокировать();
		Исключение
			Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
			Продолжить;
		КонецПопытки;
		// <...изменения документа..>
		// записываем изменения в любом случае, даже если документ не проводится!!!
		Записывать = Истина;
		Если Записывать Тогда
			Попытка
				ИсправляемыйОбъект.Записать();
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ИсправляемыйОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ИсправляемыйОбъект);
				Сообщение.Сообщить(); 
			КонецПопытки; 
		КонецЕсли; 
		ИсправляемыйОбъект.Разблокировать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Результат обработки: Всего отобрано - '"") + Счетчики.Всего + нСтр(""ru='; изменено - '"", ""ru"") + Счетчики.Изменено  +
						нСтр(""ru='; было недоступно для изменения - '"", ""ru"") + Счетчики.НеЗаблокировано ;
	Сообщение.Сообщить(); 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время окончания обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	
КонецПроцедуры //ИсправлениеДокументов

 "}
},
{0,
{"Отладка",0,0,"Отладка","Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда 
	Сообщение = Новый СообщениеПользователю; // параметр запуска РежимОтладки
	Сообщение.Текст = ""<?""Текст сообщения"">"";
	Сообщение.Сообщить(); 
КонецЕсли; 
"}
},
{0,
{"ДобавитьНазначениеДокумента",0,0,"","	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
"}
},
{0,
{"ДобавитьНазначениеСправочника",0,0,"","	ПараметрыРегистрации.Назначение.Добавить(""Справочник.<?""Тип Справочник"", Справочник>""); //""Справочник._ДемоКонтрагенты"");
"}
},
{0,
{"ИзменениеДокументаПоСсылке",0,0,"","	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Попытка
		ДокументОбъект.Заблокировать();
	Исключение
		Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
		Продолжить;
	КонецПопытки;
	// <...изменения документа..>
	// записываем изменения в любом случае, даже если документ не проводится!!!
	Записывать = Истина;
	Если ДокументОбъект.Проведен Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			Записывать = Ложь;
			Счетчики.Изменено = Счетчики.Изменено + 1;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
			Сообщение.УстановитьДанные(ДокументОбъект);
			Сообщение.Сообщить(); 
			Счетчики.НеПроведено = Счетчики.НеПроведено + 1;
		КонецПопытки; 
	КонецЕсли;
	Если Записывать Тогда
	    Если ДокументОбъект.Проведен Тогда
		    // ошибка при проведении - записываем с отменой
			Режим = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			Режим = РежимЗаписиДокумента.Запись;
		КонецЕсли; 
		Попытка
			ДокументОбъект.Записать(Режим);
			Записывать = Ложь;
			Счетчики.Изменено = Счетчики.Изменено + 1;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
			Сообщение.УстановитьДанные(ДокументОбъект);
			Сообщение.Сообщить(); 
		КонецПопытки; 
	КонецЕсли; 
	ДокументОбъект.Разблокировать();
"}
}
},
{4,
{"Расширения",1,0,"",""},
{0,
{"Вместо",0,0,"7вме","&Вместо (""<?>"")"}
},
{0,
{"После",0,0,"7пос","&После (""<?>"")
"}
},
{0,
{"Перед",0,0,"7пер","&Перед (""<?>"")
"}
},
{0,
{"УдалениеВставка",0,0,"","#Удаление
        
#КонецУдаления
#Вставка
        
#КонецВставки
"}
}
},
{1,
{"Управление",1,0,"",""},
{0,
{"ЕслиИначе",0,0,"ЕслиИ","Если <?> Тогда
	
Иначе
	
КонецЕсли; "}
}
},
{3,
{"Коллекции",1,0,"",""},
{0,
{"КолонкаТЗ",0,0,"ДобКол","Колонки.Добавить(""<?""Имя колонки"">"",Новый ОписаниеТипов(<?"""", ВыборТипа>));"}
},
{0,
{"УдалениеЭлементов",0,0,"УдлЭлем","инд_ = <?""Коллекция"">.Количество();
Пока инд_ > 0 Цикл
	инд_ = инд_ - 1;
	ЭлементКол_ = <?""Коллекция""> [инд_]; 
	Если (ЭлементКол_.Имя = ""Имя"") Тогда // заменить на нужное !!! ???
			<?""Коллекция"">.Удалить(ЭлементКол_);
	КонецЕсли; 
КонецЦикла;"}
},
{0,
{"Структура",0,0,"струк[тура]","Новый Структура ();"}
}
},
{5,
{"Стандарты + БСП",1,0,"",""},
{0,
{"ШаблонМодуляФормы",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Описание параметров формы
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонОбщегоМодуля",0,0,"","////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
// 
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонМодуляОбработкиИОбъекта",0,0,"","#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытий
//Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонМодуляФормыОбъекта",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Описание параметров формы
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// вызов механизмов стандартных подсистем
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//
	ИнициализацияФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ИнициализацияФормы()
	
КонецПроцедуры
#КонецОбласти"}
},
{0,
{"ВыводТабличногоДокумента",0,0,"","	// вывод в стандартную форму табличного документа (БСП)
	ИдентификаторПечатнойФормы = ""<?""ИдентификаторПечатнойФормы"">"";
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""СинонимПечатнойФормы"">'"");
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр(""ru = '<?""ИмяФайлаПечатнойФормы"">'"");
	
	ОбъектыПечати = Новый СписокЗначений;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура(""ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати"");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ПараметрыПечати.Вставить(""ЗаголовокФормы"", НСтр(""ru = '<?""СинонимПечатнойФормы"">'""));
	
	ПараметрыОткрытия.Вставить(""КоллекцияПечатныхФорм"", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить(""ОбъектыПечати"", ОбъектыПечати);
	
	ОткрытьФорму(""ОбщаяФорма.ПечатьДокументов"", ПараметрыОткрытия, Неопределено, КлючУникальности);
"}
}
},
{23,
{"Алгоритмы",1,0,"",""},
{0,
{"СравнитьВерсии",0,0,"","Функция СравнитьВерсии(ВерсияНовая,ВерсияСтарая)
	Рез = 0; //  0 - ВерсияНовая = ВерсияСтарая
			 //  1 - ВерсияНовая > ВерсияСтарая
			 // -1 - ВерсияНовая < ВерсияСтарая
	Отказ = Ложь;
	Для Позиция = 1 По СтрДлина(ВерсияНовая) Цикл
		Если СтрНайти(Сред( (ВерсияНовая, Позиция, 1 ),""0123456789."") = 0  Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Сравнение версий: Неверный формат ВерсияНовая'"");
			Сообщение.Сообщить();
			Отказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Для Позиция = 1 По СтрДлина(ВерсияСтарая) Цикл
		Если СтрНайти(Сред( ВерсияСтарая, Позиция, 1),""0123456789."") = 0  Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр(""ru = 'Сравнение версий: Неверный формат ВерсияСтарая'"");
			Сообщение.Сообщить(); 
			Отказ = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Если Отказ Тогда
	    Возврат Рез;
	КонецЕсли; 
			 
	МассивНовый  = СтрРазделить(ВерсияНовая,""."");
	МассивСтарый = СтрРазделить(ВерсияСтарая,""."");
	ВГраница =  Мин( МассивНовый.ВГраница(),МассивСтарый.ВГраница());
	
	Для Индекс = 0 По ВГраница Цикл
		ЗначНов  = Число(МассивНовый [Индекс]);
		ЗначСтар = Число(МассивСтарый [Индекс]); 
	    Если ЗначНов > ЗначСтар Тогда
			Рез = 1;
			Прервать;
		ИначеЕсли ЗначНов < ЗначСтар  Тогда  
			Рез = -1;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Рез;
	
КонецФункции
"}
},
{0,
{"УдалениеДвижений",0,0,"","Процедура УдалитьДвиженияДокумента(ДокументСсылка) Экспорт 
	
	МД = ДокументСсылка.Метаданные().Движения;
	
	Для каждого РегистрДвижения Из МД Цикл
		НаименованиеРегистра = РегистрДвижения.ПолноеИмя();
		Если СтрНачинаетсяС(НаименованиеРегистра,""РегистрСведений"") Тогда
			НЗ = РегистрыСведений[РегистрДвижения.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрНачинаетсяС(НаименованиеРегистра,""РегистрНакопления"") Тогда  
			НЗ = РегистрыНакопления[РегистрДвижения.Имя].СоздатьНаборЗаписей();
		ИначеЕсли СтрНачинаетсяС(НаименованиеРегистра,""РегистрБухгалтерии"") Тогда  
			НЗ = РегистрыБухгалтерии[РегистрДвижения.Имя].СоздатьНаборЗаписей();
		КонецЕсли; 
		НЗ.Отбор.Регистратор.Значение = ДокументСсылка;
		НЗ.Записать(Истина);
	КонецЦикла;

КонецПроцедуры
"}
},
{0,
{"ТолькоЦифры",0,0,"","Функция ТолькоЦифры(ПроверяемаяСтрока)
	Результат = Истина;
	Для Индекс = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
	    Если СтрНайти(""0123456789"", Сред(ПроверяемаяСтрока,Индекс,1)) = 0 Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Результат;
КонецФункции // ТолькоЦифры(ПроверяемаяСтрока) "}
},
{0,
{"ТолькоРусскиеБуквы",0,0,"","Функция ТолькоРусскиеБуквы(ПроверяемаяСтрока)
	Результат = Истина;
	Для Индекс = 1 По СтрДлина(ПроверяемаяСтрока) Цикл
	    Если СтрНайти(""АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"", ВРег (Сред(ПроверяемаяСтрока,Индекс,1))) = 0 Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат Результат;
КонецФункции // ТолькоРусскиеБуквы(ПроверяемаяСтрока) "}
},
{0,
{"РазложитьСтроку",0,0,"","// Функция ""расщепляет"" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок("",строка 1,,,строка 2"", "","") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок("" строка1   строка 2"", "" "") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = "","")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = "" "" Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
"}
},
{0,
{"ПараметрыИзСтруктуры",0,0,"",""}
},
{0,
{"СтруктураИзДанных",0,0,"","// Из данных Структура, СтрокаТЗ или ВыборкаЗапроса или... создается структура с ключами -колонками и соответствующими значениями
// 
Функция СтруктураИзДанных(Данные, СписокСвойств = """", ИсключаяСвойства = """")
	Результат = Новый Структура(); 
	МассивНеПодставляемых = СтрРазделить(ИсключаяСвойства, "","", Ложь);
	МассивСвойств = СтрРазделить(СписокСвойств, "","", Ложь);
	Если ТипЗнч(Данные) = Тип(""СтрокаТаблицыЗначений"") Тогда 
		ТЗДанные = Данные.Владелец();
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивСвойств.Количество() > 0 Тогда
			    Если МассивСвойств.Найти(Колонка.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			Если МассивНеПодставляемых.Найти(Колонка.Имя)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Колонка.Имя, Данные[Колонка.Имя]);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""ВыборкаИзРезультатаЗапроса"") Тогда
		ТЗДанные = Данные.Владелец();
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивСвойств.Количество() > 0 Тогда
			    Если МассивСвойств.Найти(Колонка.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			Если МассивНеПодставляемых.Найти(Колонка)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Колонка, Данные[Колонка]);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""Структура"") Тогда 
		Для каждого Элемент Из Данные Цикл
			Если МассивСвойств.Количество() > 0 Тогда
			    Если МассивСвойств.Найти(Элемент.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			Если МассивНеПодставляемых.Найти(Элемент.Ключ)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Результат.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции // СтруктураИзДанных()
"}
},
{0,
{"ЗаменитьИзДанных",0,0,"","// замена в строке %Параметр% на значания параметров заданных в Структуре (параметр -ключ структуры),
//      СтрокаТаблицы значений (параметр - Имя колонки)
// данные - структура, строка таблицы значений, выборка
// СимволВыделения  - обрамление параметра в тексте шаблона
// НеПодставляемые - список через запятую, которые не подставляются, например ""ДатаДок,Контрагент""
//
Функция ЗаменитьИзДанных(СтрокаТекста, Данные, Знач СимволВыделения = ""%"", НеПодставляемые = """")
 	НоваяСтрока = СтрокаТекста;
	МассивНеПодставляемых = СтрРазделить(НеПодставляемые, "","", Ложь);

	Если ТипЗнч(Данные) = Тип(""Структура"") Тогда
		#Если Сервер И НЕ Сервер Тогда  // < удалить
			Данные = Новый Структура() ;
		#КонецЕсли // удалить > 
		Для каждого Элемент  Из Данные Цикл
			Если МассивНеПодставляемых.Найти(Элемент.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			НоваяСтрока = СтрЗаменить(НоваяСтрока, СимволВыделения + Элемент.Ключ+ СимволВыделения, Элемент.Значение);
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""СтрокаТаблицыЗначений"")  Тогда 
		ТЗДанные = Данные.Владелец();
	    #Если Сервер И НЕ Сервер Тогда  // < удалить
			ТЗДанные = Новый ТаблицаЗначений;
		#КонецЕсли // удалить >
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивНеПодставляемых.Найти(Колонка.Имя)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СтрЗаменить(НоваяСтрока,СимволВыделения + Колонка.Имя + СимволВыделения, Данные[Колонка.Имя])
		КонецЦикла; 
	ИначеЕсли ТипЗнч(Данные) = Тип(""ВыборкаИзРезультатаЗапроса"") Тогда
		ТЗДанные = Данные.Владелец();
	    #Если Сервер И НЕ Сервер Тогда  // < удалить
		
		#КонецЕсли // удалить >
		Для каждого Колонка Из ТЗДанные.Колонки Цикл
			Если МассивНеПодставляемых.Найти(Колонка)  <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СтрЗаменить(НоваяСтрока,СимволВыделения + Колонка + СимволВыделения, Данные [Колонка])
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат НоваяСтрока;
	
КонецФункции // ЗаменитьИзДанных(СтрокаТекста, СтрокаТЗ)()
"}
},
{0,
{"ОбластьТабДок",0,0,"","// объединяются ячейки табличного документа и в них выводиться текст
	ОбластьШтампа = Извещение.Область(""R1C2:R10C6"");
	ОбластьШтампа.Объединить();
	ОбластьШтампа.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьШтампа.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	ОбластьШтампа.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьШтампа.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьШтампа.Шрифт = Новый Шрифт (ОбластьШтампа.Шрифт, ,8);
	ОбластьШтампа.Текст = ТекстШтампа(ПараметрыМакета,ДатаОтчета);
"}
},
{0,
{"СтрокаJSON",0,0,"","	// для записи JSON в строку 
	Запись = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON (ПереносСтрокJSON.Авто, Символы.Таб);
	Запись.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(Запись,ДанныеИБ);
	СтрокаJSON = Запись.Закрыть();
"}
},
{0,
{"ОтобразитьСтруктуруТаблицы",0,0,"","// создает строки исходного текста для создания аналогичной таблицы значений
Процедура ОтобразитьСтруктуруТаблицы(ТЗ)
	#Если Сервер И НЕ Сервер Тогда  // < удалить
		ТЗ = Новый ТаблицаЗначений;
	#КонецЕсли // удалить >
	СтрокаОписания = """";
	СтрокаОписания = ""ТЗ = Новый ТаблицаЗначений;"";
	Для каждого Колонка Из ТЗ.Колонки Цикл
		ТипыКолонки = Колонка.ТипЗначения.Типы();
		СтрокаОписания = СтрокаОписания + Символы.ВК + Символы.ПС + ""МассивТипов = Новый Массив(); "";
		Для каждого ТипКолонки Из ТипыКолонки Цикл
			//ОбъектТип = Новый (ТипКолонки);
			Попытка
				Мд = Метаданные.НайтиПоТипу(ТипКолонки);
				СтрокаОписанияТипа = СтрЗаменить(Мд.ПолноеИмя(),""."",""Ссылка."");
				СтрокаОписания = СтрокаОписания + Символы.ВК + Символы.ПС + ""МассивТипов.Добавить(Тип(""""""+ СтрокаОписанияТипа +"""""")); "";
			Исключение
				СтрокаОписания = СтрокаОписания + Символы.ВК + Символы.ПС + ""МассивТипов.Добавить(Тип(""""""+ТипКолонки+"""""")); "";
			КонецПопытки; 
		КонецЦикла; 
		СтрокаОписания = СтрокаОписания + Символы.ВК + Символы.ПС +
			""ТЗ.Колонки.Добавить("""""" + Колонка.Имя + """""", Новый ОписаниеТипов(МассивТипов),"""""" + Колонка.Заголовок + """""","" + Колонка.Ширина + "");"";
	КонецЦикла; 
	Сообщить(СтрокаОписания);
КонецПроцедуры
"}
},
{0,
{"ЭтоСсылка",0,0,"","// проверяет значение - истина, если заначение какая-либо ссылка
&НаСервереБезКонтекста 
Функция ЭтоСсылка(ПроверяемоеЗначение)
	Массив_ = СтрРазделить( XMLТипЗнч(ПроверяемоеЗначение).ИмяТипа, ""."");
	Рез = Массив_.Количество() = 2 И СтрЗаканчиваетсяНа(Массив_ [0], ""Ref""); 
	Возврат Рез;
КонецФункции
"}
},
{0,
{"JSON_вер8_2",0,0,"","#Область JSON_парсер
// https://forum.infostart.ru/forum9/topic213371/#message2176399
// https://infostart.ru/bitrix/components/infostart/forum.interface/show_file.php?fid=1255483&action=download

// JSON парсер.
//
// Параметры:
//	Значение - Строка. Строка данных в формате JSON для парсинга;
//
//  Стандарт - Неопределено, Булево. Режим работы:
//		- Истина - стандартный режим (значение по умолчанию);
//		- Ложь - альтернативный режим;
//		- Неопределено - автоопределение режима;
//
//  ПредставленияСсылок - Неопределено, Булево. Режим передачи ссылочных типов, с их представлением или без:
//		- Истина - ссылки передаются вместе со своим представлением, как объекты с двумя свойствами содержащими саму ссылку и ее представление;
//		- Ложь - ссылки передаются без представления (значение по умолчанию).
//		- Неопределено - автоопределение режима.
// 
// Возвращаемое значение:
//  Набор данных согласно содержимому входящих данных. 
//
Функция ПрочитатьJSON3(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) Экспорт 
	
	Возврат jsonПрочитатьИнициализация(Значение, Стандарт, ПредставленияСсылок);
	
КонецФункции // ПрочитатьJSON()

Функция jsonПрочитатьИнициализация(Значение, Знач Стандарт, Знач ПредставленияСсылок)
	
	// Проверка параметров.
	Если (Не Стандарт = Истина) И (Не Стандарт = Ложь) И (Не Стандарт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр(""Стандарт""); КонецЕсли; 
	Если (Не ПредставленияСсылок = Истина) И (Не ПредставленияСсылок = Ложь) И (Не ПредставленияСсылок = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйПараметр(""ПредставленияСсылок""); КонецЕсли; 
	
	// Использование более общего случая параметров.
	Альтернативный = (Стандарт = Неопределено) Или (Не Стандарт); Стандарт = (Стандарт = Неопределено) Или Стандарт; ПредставленияСсылок = (ПредставленияСсылок = Неопределено) Или ПредставленияСсылок;
	
	// Схема подстановок шестнадцатиричной системы.
	СхемаПодстановок = Новый Соответствие; ШестнадцатиричнаяСистема = ""0123456789abcdef""; ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл Для ПервыйРазряд = 1 По 16 Цикл СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло); ДесятичноеЧисло = ДесятичноеЧисло + 1; КонецЦикла; КонецЦикла;
	
	// Вспомогательные данные.
	ВспомогательныеДанные = Новый Структура(""ТипСтроки,СхемаПодстановок,АвтоматическиПриводитьКСтруктуре"",
		Тип(""Строка""),
		СхемаПодстановок,
		Истина);
		
	// Стартовые значения.
	Индекс = 1; Длина = СтрДлина(Значение);
	
	// Форматирование (первый шаг парсера).
	Если Стандарт Тогда СимволыФорматирования = "" "" + Символы.ВК + Символы.ПС + Символы.Таб; jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли;
	Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеПустойПакетДанных(); КонецЕсли; 
	
	// Парсер.
	Возврат jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Истина);
	
КонецФункции // jsonПрочитатьИнициализация()

Функция jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, ПервыйУровень)
	
	Символ = Сред(Значение, Индекс, 1);
	Если (Символ = """""""") Или (Символ = ""'"") Тогда        																	// "" , '
		
		// Строка.
		Подстрока = Сред(Значение, Индекс + 1); Начало = Индекс; Пока Истина Цикл
			Позиция = Найти(Подстрока, Символ);
			
			Если (Позиция > 0) Тогда
				Индекс = Индекс + Позиция; Откат = Позиция - 1; Маскировка = Ложь; Пока (Сред(Подстрока, Откат, 1) = ""\"") И Откат Цикл Маскировка = Не Маскировка; Откат = Откат - 1; КонецЦикла;
				Если Маскировка Тогда Подстрока = Сред(Подстрока, Позиция + 1); Иначе Прервать; КонецЕсли;
			Иначе
		  		ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
			КонецЕсли;
			
		КонецЦикла;
		
		// Строка.
		Результат = jsonПрочитатьСтроку(Сред(Значение, Начало + 1, Индекс - Начало - 1), Стандарт, Начало, ВспомогательныеДанные.СхемаПодстановок, (Символ = ""'""));
		
		Если jsonПрочитатьОпределитьДату(Результат) Тогда
			// Дата.
			Результат = jsonПрочитатьДату(Результат, Начало);
		ИначеЕсли jsonПрочитатьОпределитьИдентификатор(Результат) Тогда
			// Идентификатор.
			Результат = jsonПрочитатьИдентификатор(Результат, Начало);
		Иначе
			Если Альтернативный И jsonПрочитатьОпределитьВнутреннийТип(Результат) Тогда
				// Внутренний тип.
				Результат = jsonПрочитатьВнутреннийТип(Результат, Начало);
			КонецЕсли;
		КонецЕсли;
		
		// Корректировка индекса.
		Индекс = Индекс + 1;
		
	ИначеЕсли (Символ = ""["") Тогда																							// [
		
		// Массив.
		Результат = Новый Массив;
		
		Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = ""]"") Тогда														// ] 
			
			// Пустой массив.
			Индекс = Индекс + 1;
		
		Иначе
		
			Пока (Индекс <= Длина) Цикл
				
				// Значение.
				Результат.Добавить(jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь));
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ""]"") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Символ = "","") Тогда																				// ,
						Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, "","");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли (Символ = ""{"") Тогда																							// {
	
		// Объект.
		Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина); КонецЕсли;
		Символ = Сред(Значение, Индекс, 1); Если (Символ = ""}"") Тогда														// } 
			
			// Пустой объект.
			Индекс = Индекс + 1;
			
			// Структура или соответствие.
			Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда Результат = Новый Структура; Иначе Результат = Новый Соответствие; КонецЕсли; 
		
		Иначе
			
			Результат = Новый Соответствие;
			
			ТипСтроки = ВспомогательныеДанные.ТипСтроки; Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс; КлючЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь); Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента); КонецЕсли;
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = "":"") Тогда																					// :
					Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, "":"");
				КонецЕсли;
				
				// Значение.
				ЗначениеЭлемента = jsonПрочитать(Значение, Стандарт, Альтернативный, ПредставленияСсылок, Индекс, Длина, ВспомогательныеДанные, СимволыФорматирования, Ложь);
				
				// Коллекция.
				Результат.Вставить(КлючЭлемента, ЗначениеЭлемента);
				
				Символ = Сред(Значение, Индекс, 1);
				Если (Символ = ""}"") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Символ = "","") Тогда																				// ,
						Индекс = Индекс + 1; Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если (Индекс >= Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъетка(Длина); КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, "","");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// Структура или соответствие.
			Если ВспомогательныеДанные.АвтоматическиПриводитьКСтруктуре Тогда
				
				РезультатСтруктура = Новый Структура; 
				Для Каждого Элемент Из Результат Цикл Попытка РезультатСтруктура.Вставить(Элемент.Ключ, Элемент.Значение); Исключение РезультатСтруктура = Результат; АвтоматическоеПриведениеНеВыполнено = Истина; Прервать; КонецПопытки; КонецЦикла;
				Результат = РезультатСтруктура;
				
				// Ссылка.
				Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, (АвтоматическоеПриведениеНеВыполнено = Истина)); КонецЕсли;
				
			Иначе
				
				// Ссылка.
				Если ПредставленияСсылок Тогда Результат = jsonПрочитатьСсылку(Результат, Истина); КонецЕсли;
				
			КонецЕсли; 
		
		КонецЕсли;
		
	Иначе
	
		// Остальные примитивные типы.
		Если (Символ = ""n"") Тогда
			
			// Null.
			Если (Сред(Значение, Индекс, 4) = ""null"") Тогда Индекс = Индекс + 4; Результат = Null; Иначе ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = ""t"") Тогда
			
			// Истина.
			Если (Сред(Значение, Индекс, 4) = ""true"") Тогда Индекс = Индекс + 4; Результат = Истина; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = ""f"") Тогда
			
			// Ложь.
			Если (Сред(Значение, Индекс, 5) = ""false"") Тогда Индекс = Индекс + 5; Результат = Ложь; Иначе ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс); КонецЕсли;
			
		ИначеЕсли (Символ = ""u"") Тогда
			
			// Неопределено.
			Если (Сред(Значение, Индекс, 9) = ""undefined"") Тогда Индекс = Индекс + 9; Результат = Неопределено; Иначе ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс); КонецЕсли;
			
		Иначе
			
			// Число.
			Начало = Индекс; Пока Найти(""-+0123456789."", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
			
			// Преобразование числа.
			Попытка
				Результат = Число(Сред(Значение, Начало, Индекс - Начало));
			Исключение
				ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
			КонецПопытки;
			
			// Экспоненциальная часть.
			Если (Символ = ""E"") Или (Символ = ""e"") Тогда
				
				// Степень.
				Индекс = Индекс + 1; Позиция = Индекс; Символ = Сред(Значение, Индекс, 1); Пока Найти(""-+0123456789"", Символ) И (Индекс <= Длина) Цикл Индекс = Индекс + 1; Символ = Сред(Значение, Индекс, 1); КонецЦикла;
				
				// Преобразование степени.
				Попытка
					Степень = Число(Сред(Значение, Позиция, Индекс - Позиция));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Значение, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Возвидение числа в степень.
				Результат = Результат * Pow(10, Степень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Форматирование.
	Если Стандарт Тогда jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования); КонецЕсли; Если ПервыйУровень Тогда Если (Индекс <= Длина) Тогда ВызватьИсключение ИсключениеНекорректныйПакетДанных(Индекс); КонецЕсли; Иначе Если (Индекс > Длина) Тогда ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных(); КонецЕсли; КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // jsonПрочитать()

Функция jsonПрочитатьОпределитьДату(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 20) Тогда
		Если (Сред(Значение, 05, 1) = ""-"") И				// -
			 (Сред(Значение, 08, 1) = ""-"") И				// -
			 (Сред(Значение, 11, 1) = ""T"") И				// T
			 (Сред(Значение, 14, 1) = "":"") И				// :
			 (Сред(Значение, 17, 1) = "":"") И				// :
			 (Сред(Значение, 20, 1) = ""Z"") Тогда			// Z
			// Год. 
			Если Найти(""0123456789"", Сред(Значение, 01, 1)) И
				 Найти(""0123456789"", Сред(Значение, 02, 1)) И
				 Найти(""0123456789"", Сред(Значение, 03, 1)) И
				 Найти(""0123456789"", Сред(Значение, 04, 1)) И
			// Месяц.
				 Найти(""0123456789"", Сред(Значение, 06, 1)) И
				 Найти(""0123456789"", Сред(Значение, 07, 1)) И
			// День.
				 Найти(""0123456789"", Сред(Значение, 09, 1)) И
				 Найти(""0123456789"", Сред(Значение, 10, 1)) И
			// Час.
				 Найти(""0123456789"", Сред(Значение, 12, 1)) И
				 Найти(""0123456789"", Сред(Значение, 13, 1)) И
			// Минута.
				 Найти(""0123456789"", Сред(Значение, 15, 1)) И
				 Найти(""0123456789"", Сред(Значение, 16, 1)) И
			// Секунда.
				 Найти(""0123456789"", Сред(Значение, 18, 1)) И
				 Найти(""0123456789"", Сред(Значение, 19, 1)) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()

Функция jsonПрочитатьОпределитьИдентификатор(Значение)

	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = ""-"") И					// -
			 (Сред(Значение, 14, 1) = ""-"") И					// -
			 (Сред(Значение, 19, 1) = ""-"") И					// -
			 (Сред(Значение, 24, 1) = ""-"") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Найти(""0123456789ABCDEFabcdef"", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Найти(""0123456789ABCDEFabcdef"", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Найти(""0123456789ABCDEFabcdef"", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Найти(""0123456789ABCDEFabcdef"", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Найти(""0123456789ABCDEFabcdef"", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()

Функция jsonПрочитатьОпределитьВнутреннийТип(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = ""¦"") И (Сред(Значение, 5, 1) = ""¦"") И (Прав(Значение, 1) = ""¦""); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()

Функция jsonПрочитатьСтроку(Значение, Стандарт, Индекс, СхемаПодстановок, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = ""\"" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
						""\\"",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
						""\/"",			""/""),           // x2f
						""\b"",			Символ(008)),	// x08
						""\t"",			Символы.Таб),   // x09
						""\n"",			Символы.ПС),    // x0a
						""\f"",			Символы.ПФ),    // x0c
						""\r"",			Символы.ВК),    // x0d
						""\"""""",			"""""""");          // x22
						
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, ""\u""); Пока Позиция Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, ""\u"");
	КонецЦикла;
		
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, ""\'"", ""'""); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, ""\"");				
						
КонецФункции // jsonПрочитатьСтроку()

Функция jsonПрочитатьДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + 
					 Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
	Исключение
		
		Попытка
			Значение = СтрЗаменить(Значение, ""T"", """");
			Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + 
			Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
		Исключение
			ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
		КонецПопытки;
		
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()

Функция jsonПрочитатьСсылку(Значение, Соответствие)
	
	Перем Ссылка;
	
	// Ссылка.
	Если (Значение.Количество() = 2) Тогда 
		Если Соответствие Тогда
			Ссылка = Значение.Получить(""Ссылка""); Если (Не Ссылка = Неопределено) И (Не Значение.Получить(""Представление"") = Неопределено) Тогда Возврат Ссылка; КонецЕсли;
		Иначе
			Если Значение.Свойство(""Представление"") И Значение.Свойство(""Ссылка"", Ссылка) Тогда Возврат Ссылка; КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Значение;
	
КонецФункции // jsonПрочитатьСсылку()

Функция jsonПрочитатьИдентификатор(Значение, Индекс)
	
	// Поиск.
	Возврат Новый УникальныйИдентификатор(Значение);
	
КонецФункции // jsonПрочитатьИдентификатор()

Функция jsonПрочитатьВнутреннийТип(Значение, Индекс)
#Если ВебКлиент Или ТонкийКлиент Тогда
	ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение);
#Иначе
	
	// Поиск.
	Тип = Сред(Значение, 2, 3); Данные = Сред(Значение, 6, СтрДлина(Значение) - 6);
	
	Если (Тип = ""ref"") Тогда
		Попытка
			Возврат ЗначениеИзСтрокиВнутр(""{""""#"""","" + СтрЗаменить(СтрЗаменить(Данные, ""×"", "":""), ""÷"", "","") + ""}"");
		Исключение
			ВызватьИсключение ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение);
		КонецПопытки;
	КонецЕсли;
		
	ВызватьИсключение ИсключениеНеопознанныйТип(Индекс, Тип);
	
#КонецЕсли
КонецФункции // jsonПрочитатьВнутреннийТип()

Процедура jsonПрочитатьПропуститьФорматирование(Значение, Стандарт, Индекс, Длина, СимволыФорматирования)
	
	// Пропуск форматирования.
	Пока (Индекс <= Длина) И Найти(СимволыФорматирования, Сред(Значение, Индекс, 1)) Цикл Индекс = Индекс + 1; КонецЦикла;
	// Пробел его не видно, \r, \n, \t .
	
КонецПроцедуры // jsonПрочитатьПропуститьФорматирование()

// ─────────────────────────────────────────────────────────────────────────────
//  ЛОКАЛИЗАЦИЯ

Функция СформироватьСтрокуПоШаблону(Строка, Параметры)
	
	Результат = Строка;
		
	Для Каждого Параметр Из Параметры Цикл
		Результат = СтрЗаменить(Результат, ""["" + Параметр.Ключ + ""]"", Строка(Параметр.Значение));
	КонецЦикла;

	Возврат Результат;
	
КонецФункции // СформироватьСтрокуПоШаблону()


Функция ИсключениеПустойПакетДанных()
	
	Возврат НСтр(""ru = 'JSON: Пустой пакет данных.'; uk = 'JSON: Порожній пакет даних.'"");

КонецФункции // ИсключениеНеожиданноеОкончаниеСтроки()

Функция ИсключениеНекорректныйПакетДанных(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Некорректный пакет данных в позиции [Индекс].'; uk = 'JSON: Некоректний пакет даних у позиції [Индекс].'""),
		Новый Структура(""Индекс"", Индекс));

КонецФункции // ИсключениеНекорректныйПакетДанных()

Функция ИсключениеНеожиданноеОкончаниеПакетаДанных()
	
	Возврат НСтр(""ru = 'JSON: Неожиданное окончание пакета данных.'; uk = 'JSON: Несподіване закінчення пакета даних.'"");

КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()

Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Неожиданное окончание массива в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення масиву у позиції [Индекс].'""),
		Новый Структура(""Индекс"", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()

Функция ИсключениеНеожиданноеОкончаниеОбъетка(Индекс)

	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Неожиданное окончание объекта в позиции [Индекс].'; uk = 'JSON: Несподіване закінчення об''єкту у позиції [Индекс].'""),
	   Новый Структура(""Индекс"", Индекс));

КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()

Функция ИсключениеНекорректныйТипNull(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Некорректный тип Null в позиции [Индекс].'; uk = 'JSON: Некоректний тип Null у позиції [Индекс].'""),
	   Новый Структура(""Индекс"", Индекс));

КонецФункции // ИсключениеНекорректныйТипNull()

Функция ИсключениеНекорректныйТипБулево(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Некорректный тип Булево в позиции [Индекс].'; uk = 'JSON: Некоректний тип Булево у позиції [Индекс].'""),
	   Новый Структура(""Индекс"", Индекс));

КонецФункции // ИсключениеНекорректныйТипБулево()

Функция ИсключениеНекорректныйТипНеопределено(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Некорректный тип Неопределено в позиции [Индекс].'; uk = 'JSON: Некоректний тип Невизначено у позиції [Индекс].'""),
		Новый Структура(""Индекс"", Индекс));

КонецФункции // ИсключениеНекорректныйТипНеопределено()

Функция ИсключениеНекорректныйФорматСтроки(Индекс)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Некорректный формат строки в позиции [Индекс].'; uk = 'JSON: Некоректний формат рядка у позиції [Индекс].'""),
		Новый Структура(""Индекс"", Индекс));

КонецФункции // ИсключениеНекорректныйФорматСтроки()

Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Некорректный формат даты [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат дати [Значение] у позиції [Индекс].'""),
		Новый Структура(""Индекс"", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНекорректныйФорматДаты()

Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение)
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Неверный формат данных в позиции [Индекс].'; uk = 'JSON: Невірний формат даних у позиції [Индекс].'""),
			Новый Структура(""Индекс"", Индекс));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Некорректный формат числа [Значение] в позиции [Индекс].'; uk = 'JSON: Некоректний формат числа [Значение] у позиції [Индекс].'""),
			Новый Структура(""Индекс,Значение"", Индекс, Символ(034) + Значение + Символ(034)));
					   
	КонецЕсли;
					   
КонецФункции // ИсключениеНекорректныйФорматЧисла()

Функция ИсключениеНедопустимыйСимвол(Индекс, Символ)
	
	Если (Символ = Неопределено) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Недопустимый символ в позиции [Индекс].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс].'""),
			Новый Структура(""Индекс"", Индекс));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Недопустимый символ в позиции [Индекс], ожидается [Символ].'; uk = 'JSON: Неприпустимий символ в позиції [Индекс], очікується [Символ].'""),
			Новый Структура(""Индекс,Символ"", Индекс, Символ(034) + Символ + Символ(034)));

	КонецЕсли;
				   
КонецФункции // ИсключениеНедопустимыйСимвол()

Функция ИсключениеНеопознанныйТип(Индекс, Тип)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Недопустимый тип [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип [Тип] у позиції [Индекс].'""),
		Новый Структура(""Индекс,Тип"", Индекс, Символ(034) + Тип + Символ(034)));

КонецФункции // ИсключениеНеопознанныйТип()

Функция ИсключениеНевозможноПреобразоватьЗначение(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Невозможно преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо перетворити значення [Значение] у позиції [Индекс].'""),
		Новый Структура(""Индекс,Значение"", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначение()

Функция ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте(Индекс, Значение)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Невозможно на клиенте преобразовать значение [Значение] в позиции [Индекс].'; uk = 'JSON: Неможливо на клієнті перетворити значення [Значение] у позиції [Индекс].'""),
		Новый Структура(""Индекс,Значение"", Индекс, Символ(034) + Значение + Символ(034)));

КонецФункции // ИсключениеНевозможноПреобразоватьЗначениеНаКлиенте()

Функция ИсключениеНекорректныйПараметр(Параметр)
	
	Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Недопустимое значение параметра [Параметр].'; uk = 'JSON: Неприпустиме значення параметра [Параметр].'""),
		Новый Структура(""Параметр"", Символ(034) + Параметр + Символ(034)));

КонецФункции // ИсключениеНекорректныйПараметр()

Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение)
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Недопустимый тип значения ключа [Тип].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип].'""),
			Новый Структура(""Тип"", ТипЗнч(Значение)));

	Иначе
		
		Возврат СформироватьСтрокуПоШаблону(НСтр(""ru = 'JSON: Недопустимый тип значения ключа [Тип] в позиции [Индекс].'; uk = 'JSON: Неприпустимий тип значення ключа [Тип] в позиції [Индекс].'""),
			Новый Структура(""Индекс,Тип"", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034)));

	КонецЕсли;

КонецФункции // ИсключениеНедопустимыйТипКлюча()

Функция ИсключениеНевозможноВыполнитьЗапрос(Описание)
	
	Позиция = Найти(Описание, ""}: ""); Если Позиция Тогда Позиция = Позиция + 3; Иначе Позиция = 1; КонецЕсли;
	Длина = Найти(Описание, Символы.ПС); Если Длина Тогда Длина = Длина - Позиция; Иначе Длина = СтрДлина(Описание); КонецЕсли;
	Возврат НСтр(""ru = 'JSON: Невозможно выполнить запрос. '; uk = 'JSON: Неможливо виконати запит. '"") + Сред(Описание, Позиция, Длина) + ""."";

КонецФункции // ИсключениеНевозможноВыполнитьЗапрос()

// еще ссылки :
// https://helpf.pro/faq82/view/1664.html
// https://helpf.pro/faq/view/1299.html
// https://wonderland.v8.1c.ru/blog/sredstva-raboty-s-json/

#КонецОбласти  // JSON_парсер


Процедура КнопкаВыполнитьНажатие(Кнопка)
	// прочитать JSON
	//ФайлJSON = Новый ТекстовыйДокумент; 
	//ФайлJSON.Прочитать(ИмяФайла,""utf8""); 
	//СтрокаJSON = ФайлJSON.ПолучитьТекст();
	
	ФайлJSON = Новый ЧтениеТекста(ИмяФайла,""utf-8""); ; 
	//ФайлJSON.Прочитать(ИмяФайла,""utf8""); 
	СтрокаJSON = ФайлJSON.Прочитать();
	//ФайлJSON = Новый Файл (ИмяФайла);
	ТЗ = ПрочитатьJSON3(СтрокаJSON,Истина,Ложь);
	Если ТипЗнч(ТЗ) = Тип(""Массив"") Тогда
		Для каждого СтрокаТЗ Из ТЗ Цикл
			Если ТипЗнч(СтрокаТЗ) = Тип(""Структура"") Тогда
				СсылкаГУИД_ = """";
				ТипСтрока_ = """";
			    Если СтрокаТЗ.Свойство(""ref"", СсылкаГУИД_) Тогда
				КонецЕсли; 
			    Если СтрокаТЗ.Свойство(""type1c"",ТипСтрока_) Тогда
				КонецЕсли;
				Если ЗначениеЗаполнено(СсылкаГУИД_ ) И ЗначениеЗаполнено(ТипСтрока_)  Тогда
					Массив_ = СтрРазделить(ТипСтрока_,""."");
					Если Массив_ [0] = ""СправочникСсылка""  Тогда
						Ссылка_ = Справочники [Массив_ [1]].ПолучитьСсылку(Новый УникальныйИдентификатор( СсылкаГУИД_)); 
						ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Ссылка_);
					ИначеЕсли Массив_ [0] = ""ДокументСсылка""  Тогда
						Ссылка_ = Документы [Массив_ [1]].ПолучитьСсылку(Новый УникальныйИдентификатор( СсылкаГУИД_)); 
						ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Ссылка_);
					КонецЕсли;
				Иначе	
				    Продолжить;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

"}
},
{0,
{"ДобавитьКомандуНаФорму_Алгоритм",0,0,"","// === образец ===
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    МоиРеквизиты = Новый Массив;
    ТипСтрока = Новый ОписаниеТипов(""Строка"", , Новый КвалификаторыСтроки());
    МоиРеквизиты.Добавить(Новый РеквизитФормы(""ОписаниеОбъекта"", ТипСтрока, """", ""Описание объекта"", Ложь));
    ИзменитьРеквизиты(МоиРеквизиты);
    Команда = Команды.Добавить(""ИзменитьСтроку"");
    Команда.Действие = ""ОбработчикПрограммныхКоманд"";
    Команда.Заголовок = ""Изменить строку"";
    Элемент = Элементы.Добавить(""ОписаниеОбъекта"", Тип(""ПолеФормы""));
    Элемент.Вид = ВидПоляФормы.ПолеВвода;
    Элемент.ПутьКДанным = ""ОписаниеОбъекта"";
    Элемент = Элементы.Добавить(""ИзменитьСтроку"", Тип(""КнопкаФормы""));
    Элемент.ИмяКоманды = ""ИзменитьСтроку"";
КонецПроцедуры
...
&НаКлиенте
Процедура ОбработчикПрограммныхКоманд(Команда)
    ЭтотОбъект.ОписаниеОбъекта = ""Описание объекта, сформированное командой"";
КонецПроцедуры"}
},
{0,
{"ТабДокВТаблицуЗначений",0,0,"","Процедура ПрочитатьТабДокВТЗ(Кнопка)
	
	// Определение таблицы значений
	ТЗизТабДока = Новый ТаблицаЗначений;
	ТЗизТабДока.Колонки.Добавить(""Наименование"");
	ТЗизТабДока.Колонки.Добавить(""Код"");
	
	// Чтение табличного документа (например файл Excel)
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ПутьКФайлу, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	мВысотаТабличногоДокумента = ТабДок.ВысотаТаблицы;
	
	// Обход строк табличного документа и заполнение таблицы значений
	Для Строка = 2 По мВысотаТабличногоДокумента Цикл
		НоваяСтр = ТЗизТабДока.Добавить();
		НоваяСтр.Наименование = ПолучитьСодержаниеЯчейки(ТабДок, Строка, 1);
		НоваяСтр.Код = ПолучитьСодержаниеЯчейки(ТабДок, Строка, 2);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСодержаниеЯчейки(пТабличныйДокумент, Строка, Колонка)	
	Если Колонка = 0 Тогда
		Возврат """";
	КонецЕсли;	
	мСодержание = пТабличныйДокумент.Область(""R"" + Формат(Строка,""ЧГ="") + ""C"" + Формат(Колонка,""ЧГ="")).Текст;	
	Возврат СокрЛП(мСодержание);
КонецФункции"}
},
{0,
{"ТабДокВТаблицуЗначений2",0,0,"","
Построитель = Новый ПостроительОтчета;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДок.Область());       
Построитель.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
Построитель.ЗаполнитьНастройки();
Построитель.Выполнить();
ТЗ = Построитель.Результат.Выгрузить();"}
},
{0,
{"ТабДокВДеревоЗначений",0,0,"","// Дерево значений по табличному документу, с аналогичной иерархией существующих группировок
//
// Параметры:
//  ТабДок - ТабличныйДокумент
//  СвойстваКолонок - ТаблицаЗначений
//	 *Имя - Строка - Имя колонки дерева, в которую будут помещены данные области колонки табличного документа
//	 *Номер - Число - Номер колонки в табличном документе
//  ВысотаШапки - Число - для отсечения незначащих строк
//  УдалятьФлаговыеКолонки - Булево - При анализе табличного документа в дерево добавляются служебные колонки 
//	""Начало"" и ""Конец"", где сохраняются диапазоны группировки. Если Истина - то эти колонки при окончании 
//	алгоритма будут удалены.
//  ИсключатьПустыеСтроки - Булево - Если Истина, то строки в которых значения всех колонок пустые будут исключены
//
// Возвращаемое значение: 
//  ДеревоЗначений
// 
Функция ТабличныйДокументВДеревоЗначений(ТабДок, СвойстваКолонок, ВысотаШапки = 0, УдалятьФлаговыеКолонки = Истина, ИсключатьПустыеСтроки = Истина)
	
	ДеревоДокумента = Новый ДеревоЗначений;
	Для каждого ОписаниеКолонки Из СвойстваКолонок Цикл
		ДеревоДокумента.Колонки.Добавить(ОписаниеКолонки.Имя);		
	КонецЦикла; 
	ДеревоДокумента.Колонки.Добавить(""Начало"");
	ДеревоДокумента.Колонки.Добавить(""Конец"");
	
	Кэш = Новый ТабличныйДокумент;
	Кэш.Вывести(ТабДок);	
	Для сч = -Кэш.КоличествоУровнейГруппировокСтрок() По 0 Цикл
		Кэш.ПоказатьУровеньГруппировокСтрок(-сч);				
	КонецЦикла; 	
	
	ПройденныеСтроки = Новый Соответствие;
	ПройденныеУровни = Новый Соответствие;
	ПустыеСтроки = Новый Соответствие;
	
	КоличествоУровней =Кэш.КоличествоУровнейГруппировокСтрок(); 
	Для СчетчикУровня=1 По КоличествоУровней Цикл
		
		ПройденныеУровни.Вставить(СчетчикУровня, Новый Массив);
		Кэш.ПоказатьУровеньГруппировокСтрок(СчетчикУровня-1);		
		Для СчетчикСтрок=1 По Кэш.ВысотаТаблицы Цикл
			
			Если СчетчикСтрок <= ВысотаШапки Тогда
				Продолжить;				
			КонецЕсли; 
				
			Если ПройденныеСтроки.Получить(СчетчикСтрок) = Истина Тогда
				Продолжить;					
			КонецЕсли; 
			Если ИсключатьПустыеСтроки Тогда
				ЭтоПустаяСтрока = ПустыеСтроки.Получить(СчетчикСтрок);
				Если ЭтоПустаяСтрока = Неопределено Тогда
					ЭтоПустаяСтрока = Истина;
					Для каждого ОписаниеКолонки Из СвойстваКолонок Цикл
						ОбластьЯчейки = Кэш.Область(СчетчикСтрок, ОписаниеКолонки.Номер);
						Если ЗначениеЗаполнено(ОбластьЯчейки.Текст) Тогда
							ЭтоПустаяСтрока = Ложь;	
							Прервать;						
						КонецЕсли; 						
					КонецЦикла; 	
					
					ПустыеСтроки.Вставить(СчетчикСтрок, ЭтоПустаяСтрока);
				КонецЕсли; 
				Если ЭтоПустаяСтрока Тогда
					Продолжить;					
				КонецЕсли; 
			КонецЕсли; 
						
			ИмяОбласти = ""R"" + Формат(СчетчикСтрок, ""ЧГ="");
			ОбластьСтроки = Кэш.Область(ИмяОбласти);
			Если ОбластьСтроки.Видимость Тогда
				
				Если СчетчикУровня = 1 Тогда
					Родитель = ДеревоДокумента;
				Иначе
					МассивНомеровСтрокПредУровня = ПройденныеУровни.Получить(СчетчикУровня-1);
					Для сч=-МассивНомеровСтрокПредУровня.ВГраница() По 0 Цикл
						НомерСтрокиРодителя = МассивНомеровСтрокПредУровня[-сч];
						Если НомерСтрокиРодителя < СчетчикСтрок Тогда
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
					
					Родитель = ДеревоДокумента.Строки.Найти(НомерСтрокиРодителя, ""Начало"", Истина);
				КонецЕсли; 
				
				Узел = Родитель.Строки.Добавить();
				Узел.Начало = СчетчикСтрок;
				Для каждого ОписаниеКолонки Из СвойстваКолонок Цикл
					ОбластьЯчейки = Кэш.Область(СчетчикСтрок, ОписаниеКолонки.Номер);
					Узел[ОписаниеКолонки.Имя] = СокрЛП(ОбластьЯчейки.Текст);				
				КонецЦикла; 			
				
				Если СчетчикУровня < КоличествоУровней Тогда
					ПройденныеСтроки.Вставить(СчетчикСтрок, Истина);					
					МассивНомеровСтрокУровня = ПройденныеУровни.Получить(СчетчикУровня);
					МассивНомеровСтрокУровня.Добавить(СчетчикСтрок);				
				КонецЕсли; 				
			КонецЕсли; 			
			
			Если Узел <> Неопределено Тогда 
				Узел.Конец = СчетчикСтрок;					
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла; 
	
	Если УдалятьФлаговыеКолонки Тогда
		ДеревоДокумента.Колонки.Удалить(""Начало"");		
		ДеревоДокумента.Колонки.Удалить(""Конец"");		
	КонецЕсли; 
	
	Возврат ДеревоДокумента;
КонецФункции"}
},
{0,
{"ИдентификаторПоСтроке",0,0,"","// Формирование идентификатора по правилам образования имен переменных 1С по входящей строке
// Пример ""Статья возмещение НДС"" => ""СтатьяВозмещениеНДС""
//
// Параметры:
//  стр - Строка - от которой необходимо получить идентификатор
//
// Возвращаемое значение: 
//  Строка
//
Функция ИдентификаторПоСтроке(ЗНАЧ стр)
    ДопустимыеСимволы = ""ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁQWERTYUIOPASDFGHJKLZXCVBNM"" + 
    ""йцукенгшщзхъфывапролджэячсмитьбюёqwertyuiopasdfghjklzxcvbnm_ "";
    СимволыЦифр = ""0987654321"";
    ДопустимыеСимволы = СимволыЦифр + ДопустимыеСимволы;
    
    Пока Найти(стр, ""  "") > 0 Цикл
        стр = СтрЗаменить(стр, ""  "", "" "");            
    КонецЦикла; 
    
    ДлинаСтроки = СтрДлина(стр);
    СледующаяЗаглавная = Истина;
    Идентификатор = """";
    Для сч=1 По ДлинаСтроки Цикл
        
        сим = Сред(стр, сч, 1);
        
        Если Найти(ДопустимыеСимволы, сим) = 0 Тогда
            сим = ""_"";           
        КонецЕсли; 
        
        Если сч = 1 И сим = ""_"" Тогда
            Продолжить;            
        КонецЕсли; 
                
        Если сим = "" "" Тогда
            СледующаяЗаглавная = Истина;
            Продолжить;
        КонецЕсли; 
        
        Если СледующаяЗаглавная Тогда
            СледующаяЗаглавная = Ложь;
            Сим = Врег(Сим);            
        КонецЕсли; 
        ЭтоЦифра = Найти(СимволыЦифр, сим) > 0;            
        Если сч = 1 И ЭтоЦифра Тогда
            сим = ""_"" + сим;                
        КонецЕсли;             
        Если ЭтоЦифра Тогда
            СледующаяЗаглавная = Истина;                
        КонецЕсли; 
        
        Идентификатор = Идентификатор + Сим;                
    КонецЦикла; 
        
    Возврат Идентификатор;
КонецФункции"}
},
{0,
{"ИдентификаторВПредставление",0,0,"","// Преобразование переданного идентификатора в представление
//
// Параметры:
//  Идентификатор - Строка - образованная по правилам формирования идентификаторов 1С
//
// Возвращаемое значение: 
//  Строка - преобразованный идентификатор. 
//   - Первая буква всегда заглавная
//   - Первое подчеркивание пропускается
//   - Прочие заглавные буквы преобразуются в нижний регистр, после вставляется пробел
//   - Между цифрой и буквой вставляется пробел, между подряд идущими цифрами пробелов нет
//   - Несколько сплошных подчеркиваний воспринимаются как один, превращаются в пробел
//   - В строке может присутствовать символ, отличный от допустимых в идентификаторе - не обрабатывается
//   - Учитывается капитель (аббревиатуры) и спецсимволы в капители
//
//	Примеры:
//   ""ЭтоДата23_05_06"" -> ""Это дата 23 05 06""
//   ""Это____ПримерС_Подчеркиваниями"" -> ""Это пример с подчеркиваниями""
//   ""это_ПримерС_ПервойНеЗаглавной"" -> ""Это пример с первой не заглавной""
//   ""Это_ПримерС_НевернымИден???тификатором*"" -> ""Это пример с неверным иден???тификатором*""
//   ""_Это_ПримерС_первымПодчеркиванием"" -> ""Это пример с первым подчеркиванием""
//   ""Это_КАПИ_ТЕЛЬ"" -> ""Это КАПИТЕЛЬ""
//   ""Это_КАПИ99ТЕЛЬ"" -> ""Это КАПИ 99 ТЕЛЬ""
//   ""Это_КАПИ??ТЕЛЬ"" -> ""Это КАПИ??ТЕЛЬ""
// 
Функция ИдентификаторВПредставление(Идентификатор) Экспорт
	Цифры = ""0123456789"";
	Алфавит = ""АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"" + ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";
	
	ИдентификаторКОбработке = СокрЛП(Идентификатор);
	Пока Найти(ИдентификаторКОбработке, ""__"") Цикл
		ИдентификаторКОбработке = СтрЗаменить(ИдентификаторКОбработке, ""__"", ""_"");		
	КонецЦикла; 
	Пока Лев(ИдентификаторКОбработке, 1) = ""_"" Цикл
		ИдентификаторКОбработке = Сред(ИдентификаторКОбработке, 2);
	КонецЦикла; 	
	
	ПредыдущийЗнакЭтоПробел = Ложь;
	ПредыдущийЗнакЭтоЦифра = Ложь;
	ПредыдущийЗнакЭтоЗаглавная = Ложь;
	ПредыдущийЗнакЭтоСпецСимвол = Ложь;
	Слово = """";
	Для сч=1 По СтрДлина(ИдентификаторКОбработке) Цикл
		ДобавитьПробел = Ложь;
		
		Сим = Сред(ИдентификаторКОбработке, сч, 1);		
		ВрегСим = Врег(Сим);
		НрегСим = Нрег(Сим);
		СимВСлово = Сим;
				
		ЭтоНижнийСлэш = сим = ""_"";	
		ЭтоЦифра = Найти(Цифры, Сим) > 0;
		ЭтоБуква = Найти(Алфавит, ВрегСим) > 0;
		ЭтоПрочийЗнак = НЕ (ЭтоНижнийСлэш ИЛИ ЭтоЦифра);
		ЭтоЗаглавная = (Сим = ВрегСим) И (Сим <> НрегСим);
		
		Если сч=1 Тогда			
			СимВСлово = ВрегСим;
			
		ИначеЕсли ЭтоЦифра И НЕ ПредыдущийЗнакЭтоЦифра Тогда
			ДобавитьПробел = Истина;
			
		ИначеЕсли ЭтоНижнийСлэш Тогда
			ДобавитьПробел = Истина;
			СимВСлово = """";
			
		ИначеЕсли ЭтоПрочийЗнак И ЭтоЗаглавная И НЕ ПредыдущийЗнакЭтоЗаглавная И НЕ ПредыдущийЗнакЭтоСпецСимвол Тогда			
			ДобавитьПробел = Истина;				
			СимВСлово = НрегСим;					
		КонецЕсли;			

		ЭтоВторойСимволКапители = ЭтоЗаглавная И ПредыдущийЗнакЭтоЗаглавная;
		Если ЭтоВторойСимволКапители Тогда			
			ПоследнийСимвол = Прав(Слово, 1);
			Слово = Сред(Слово, 1, СтрДлина(Слово)-1) + ВРЕГ(ПоследнийСимвол);			
		КонецЕсли; 
		
		ДобавитьПробел = ДобавитьПробел И НЕ ПредыдущийЗнакЭтоПробел;
		Если ДобавитьПробел Тогда
			СимВСлово = "" "" + СимВСлово;			
		КонецЕсли; 
		
		Слово = Слово + СимВСлово;		
		
		ПредыдущийЗнакЭтоПробел = СимВСлово = "" "";
		ПредыдущийЗнакЭтоЦифра = ЭтоЦифра;
		ПредыдущийЗнакЭтоЗаглавная = ЭтоЗаглавная;
		ПредыдущийЗнакЭтоСпецСимвол = НЕ (ЭтоБуква ИЛИ ЭтоНижнийСлэш ИЛИ ЭтоЦифра);
	КонецЦикла;	
	Возврат Слово;
	
КонецФункции "}
},
{0,
{"ВоспроизвестиЗвуковойФайл",0,0,"","// конечно на клиенте
Процедура ВоспроизвестиЗвуковойФайл(ПутьКФайлу)
 
    oVoice = Новый COMОбъект(""SAPI.SpVoice"");
 
    oSpFileStream = Новый COMОбъект(""SAPI.SpFileStream"");
 
    oSpFileStream.Open(ПутьКФайлу);
 
    Если НЕ oVoice.AudioOutput = Неопределено Тогда
 
        oVoice.SpeakStream(oSpFileStream);
 
    КонецЕсли;
 
    oSpFileStream.Close();
 
КонецПроцедуры"}
},
{0,
{"НовыеСтроковыеФункции",0,0,"","// НовыеСтроковыеФункции - для старых версий!!!

Функция СтрНачинаетсяС(ИсходнаяСтрока, СтрокаПоиска)
	Рез = Ложь;
	Если СтрДлина(СтрокаПоиска) = 0 Тогда
		ВызватьИсключение (""Пустая строка поиска"");
	КонецЕсли; 
	Если СтрДлина(СтрокаПоиска) <= СтрДлина(ИсходнаяСтрока)  Тогда
		Рез = ( СтрокаПоиска = Лев(ИсходнаяСтрока,СтрДлина(СтрокаПоиска) ) );
	КонецЕсли;  
	Возврат Рез;	
КонецФункции

Функция СтрСоединить(МассивСлов, Разделитель)
	#Если Сервер И НЕ Сервер Тогда  // < удалить
		МассивСлов = Новый  Массив;
	#КонецЕсли // удалить >
	Рез = """";
	
	Для каждого Слово Из МассивСлов Цикл
		Если Рез = """" Тогда
			Рез = Слово;
		Иначе
			Рез = Рез + Разделитель + Слово;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция СтрРазделить(ИсходнаяСтрока, Разделитель, ВключатьПустые = Истина)
	ТекСтрока = ИсходнаяСтрока;
	МассивСлов = Новый Массив;
	
	Пока Найти(ТекСтрока,Разделитель) <> 0 Цикл
		Слово = Лев(ТекСтрока, Найти(ТекСтрока,Разделитель)-1);
		Если ЗначениеЗаполнено(Слово) ИЛИ ВключатьПустые Тогда
			МассивСлов.Добавить(Слово);
		КонецЕсли;
		ТекСтрока = Сред(ТекСтрока,Найти(ТекСтрока,Разделитель)+1 );
	КонецЦикла; 
	Если ЗначениеЗаполнено(ТекСтрока)  Тогда
		МассивСлов.Добавить(ТекСтрока);
	КонецЕсли; 
	
	Возврат МассивСлов;
	
КонецФункции


"}
},
{0,
{"ЧтениеXMLВДерево",0,0,"","&НаСервере
Функция ЧтениеXMLВДерево(Путь)
	
	ДеревоС = Новый ДеревоЗначений;
	ДеревоС.Колонки.Добавить(""Узел"");
	ДеревоС.Колонки.Добавить(""Значение"");
	
	XMLФайл = Новый ЧтениеXML;
	XMLФайл.ОткрытьФайл(Путь);
	
	ПрочитатьXMLПоТегам(XMLФайл, ДеревоС.Строки);
	
	XMLФайл.Закрыть();
	
	Возврат ДеревоС;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПрочитатьXMLПоТегам(XMLФайл, ТекущийНаборСтрок)
    
    Пока XMLФайл.Прочитать() Цикл
		Если XMLФайл.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
            
            НоваяСтрока = ТекущийНаборСтрок.Добавить();
            НоваяСтрока.Узел = XMLФайл.Имя;
            НоваяСтрока.Значение = """";
            
			Пока XMLФайл.ПрочитатьАтрибут() Цикл
				
				НоваяСтрокаАтрибут = НоваяСтрока.Строки.Добавить();
	            НоваяСтрокаАтрибут.Узел = XMLФайл.Имя;
	            НоваяСтрокаАтрибут.Значение = СокрЛП(XMLФайл.Значение);
					
			КонецЦикла;
			
			ПрочитатьXMLПоТегам(XMLФайл, НоваяСтрока.Строки);
			
        ИначеЕсли XMLФайл.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
            Возврат;
		ИначеЕсли XMLФайл.ТипУзла = ТипУзлаXML.Текст Тогда
			
            ТекущийНаборСтрок.Родитель.Значение = СокрЛП(XMLФайл.Значение);
            
        Иначе
            Сообщить(""Тип узла: "" + XMLФайл.ТипУзла + "" НЕ ОБРАБОТАН"", СтатусСообщения.Важное);
        Конецесли;
    КонецЦикла;
     
КонецПроцедуры
"}
},
{0,
{"ТаблицаЗначенийВтабличныйДокумент",0,0,"","ТабДок = Новый ТабличныйДокумент;
Построитель = Новый ПостроительОтчета;
Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
Построитель.Выполнить();
Построитель.Вывести(ТабДок);
"}
}
},
{3,
{"Комментарии",1,0,"",""},
{0,
{"рефакторинг",0,0,"/реф","//@рефакторинг"}
},
{0,
{"TODO",0,0,"/сдел","//TODO - <?""Что сделать?"">"}
},
{0,
{"Версия",0,0,"/вер","//  1.0.0.1  -  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> - <что сделано>"}
}
},
{1,
{"Отладка",1,0,"",""},
{0,
{"ПолучитьВТ",0,0,"","// Функция - Получить ВТ
//
// Параметры:
//  МВТ			 - Менеджер временных таблиц	 - 
//  ИмяТаблицы	 - Строка	 -  Имя таблицы получения данных
// 
// Возвращаемое значение:
//   - 
//
&НаСервере
Функция ПолучитьВТ(МВТ, ИмяТаблицы)
	Если МВТ.Таблицы.Найти(ИмяТаблицы) = Неопределено Тогда
		Возврат ""Таблица '"" + ИмяТаблицы + ""' - не найдена""
	Иначе
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МВТ;
		//Запрос.Выполнить();
		Запрос.Текст=""ВЫБРАТЬ * из "" + ИмяТаблицы;
		ТзПередано=Запрос.Выполнить().Выгрузить();	
		Возврат ТзПередано;
	КонецЕсли; 
КонецФункции // ПолучитьВТ()

"}
}
},
{1,
{"ТекстыЗапросов",1,0,"",""},
{0,
{"СоздатьТаблицуДанных",0,0,"","ВЫБРАТЬ
	1 КАК Поле1,
	""Справочник"" КАК Поле2
ПОМЕСТИТЬ ВТ_НашиДанные
ОБЪЕДИНИТЬ ВСЕ
ВЫБРАТЬ
	2,
	""Документ""
ОБЪЕДИНИТЬ ВСЕ
ВЫБРАТЬ
	3,
	""Константа""
;
////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_НашиДанные.Поле1 КАК Поле1,
	ВТ_НашиДанные.Поле2 КАК Поле2
ИЗ
	ВТ_НашиДанные КАК ВТ_НашиДанные
ГДЕ
	ВТ_НашиДанные.Поле1 = &Поле1"}
}
},
{2,
{"ОбычныеФормы",1,0,"",""},
{0,
{"ОформлениеСтрок",0,0,"","Процедура гвк_ПолучитьОформлениеСтрок(ОформленияСтрок)
	//ТипНомерСтроки = Новый Массив;
	//ТипНомерСтроки.Добавить(Новый КвалификаторыЧисла(6));
	//ТипКоличество = Новый Массив;
	//ТипКоличество.Добавить(Новый КвалификаторыЧисла(10,4));
	ТЗТовары = Новый ТаблицаЗначений;
	ТЗТовары.Колонки.Добавить(""НомерСтроки"",Новый ОписаниеТипов(""Число"",Новый КвалификаторыЧисла(6)));
	ТЗТовары.Колонки.Добавить(""Номенклатура"",Новый ОписаниеТипов(""СправочникСсылка.Номенклатура""));
	ТЗТовары.Колонки.Добавить(""ХарактеристикаНоменклатуры"",Новый ОписаниеТипов(""СправочникСсылка.ХарактеристикиНоменклатуры""));
	ТЗТовары.Колонки.Добавить(""Количество"",Новый ОписаниеТипов(""Число"",Новый КвалификаторыЧисла(10,4)));
	Для Индекс = 0 По ОформленияСтрок.Количество()- 1 Цикл
		СтрокаОформления = ОформленияСтрок [Индекс];   
		СтрокаТЗТовары = ТЗТовары.Добавить();
		СтрокаТЗТовары.НомерСтроки = Индекс;
		СтрокаТЗТовары.Номенклатура = СтрокаОформления.ДанныеСтроки.Номенклатура;
		СтрокаТЗТовары.ХарактеристикаНоменклатуры = СтрокаОформления.ДанныеСтроки.ХарактеристикаНоменклатуры;
		СтрокаТЗТовары.Количество = СтрокаОформления.ДанныеСтроки.Количество;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		""ВЫБРАТЬ
		|	ТЗ_Товары.НомерСтроки,
		|	ТЗ_Товары.Номенклатура КАК Номенклатура,
		|	ТЗ_Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТЗ_Товары.Количество
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	&ТЗ_Товары КАК ТЗ_Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ЗаказыПокупателейОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_ОстаткиЗаказа
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(
		|			,
		|			ЗаказПокупателя = &ЗаказПокупателя
		|				И (Номенклатура, ХарактеристикаНоменклатуры) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК ЗаказыПокупателейОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры,
		|	СУММА(ВЫБОР
		|			КОГДА &ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|				ТОГДА ВТ_Товары.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ)
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			Склад В
		|					(ВЫБРАТЬ
		|						Константы.гвк_ОсновнойСклад
		|					ИЗ
		|						Константы КАК Константы)
		|				И (Номенклатура, ХарактеристикаНоменклатуры) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура,
		|						ВТ_Товары.ХарактеристикаНоменклатуры
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК ТоварыНаСкладахОстатки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	ХарактеристикаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
		|	ВТ_Товары.Номенклатура,
		|	ВТ_Товары.ХарактеристикаНоменклатуры,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) = 0
		|			ТОГДА """"Зеленый""""
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) < 0
		|			ТОГДА """"Синий""""
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) <= ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0)
		|			ТОГДА """"Белый""""
		|		КОГДА ЕСТЬNULL(ВТ_ОстаткиЗаказа.КоличествоОстаток, 0) > 0
		|				И ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) = 0
		|			ТОГДА """"Красный""""
		|		ИНАЧЕ """"Желтый""""
		|	КОНЕЦ КАК Цвет
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиЗаказа КАК ВТ_ОстаткиЗаказа
		|		ПО ВТ_Товары.Номенклатура = ВТ_ОстаткиЗаказа.Номенклатура
		|			И ВТ_Товары.ХарактеристикаНоменклатуры = ВТ_ОстаткиЗаказа.ХарактеристикаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		|		ПО ВТ_Товары.Номенклатура = ВТ_Остатки.Номенклатура
		|			И ВТ_Товары.ХарактеристикаНоменклатуры = ВТ_Остатки.ХарактеристикаНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки"";
	
	Запрос.УстановитьПараметр(""ЗаказПокупателя"", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр(""ТЗ_Товары"", ТЗТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//КонецЦикла;
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	//Для каждого СтрокаОформления Из ОформленияСтрок Цикл
	Для Индекс = 0 По ОформленияСтрок.Количество()- 1 Цикл
		//СтруктураПоиска = Новый Структура(""НомерСтроки"", СтрокаОформления.ДанныеСтроки.КлючСтроки );
		СтрокаОформления = ОформленияСтрок [Индекс];   
		СтруктураПоиска = Новый Структура(""НомерСтроки"", Индекс );
		ВыборкаДетальныеЗаписи.Сбросить();
		Если ВыборкаДетальныеЗаписи.НайтиСледующий(СтруктураПоиска) Тогда
		    Если ВыборкаДетальныеЗаписи.Цвет = ""Зеленый"" Тогда
				СтрокаОформления.ЦветФона = Новый Цвет(128,255,128)
			ИначеЕсли ВыборкаДетальныеЗаписи.Цвет = ""Белый"" Тогда 	
				СтрокаОформления.ЦветФона = Новый Цвет(255,255,255)
			ИначеЕсли ВыборкаДетальныеЗаписи.Цвет = ""Красный"" Тогда 	
				СтрокаОформления.ЦветФона = Новый Цвет(255,128,128)
			ИначеЕсли ВыборкаДетальныеЗаписи.Цвет = ""Синий"" Тогда 	
				СтрокаОформления.ЦветФона = Новый Цвет(128,128,255)
			Иначе // желтый
				СтрокаОформления.ЦветФона = Новый Цвет(255,255,128)
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
"}
},
{0,
{"СтарыйВыборФайла",0,0,"","Процедура <?""Имя реквизита"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие; // ???
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = НСтр(""ru = '<?""Расширение файла"">'; en = '<?""Расширение файла"">'"")
    + ""(*.<?""Расширение файла"">)|*.<?""Расширение файла"">"";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""Имя реквизита"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите файл"";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		<?""Имя реквизита""> = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры
"}
}
}
}
}