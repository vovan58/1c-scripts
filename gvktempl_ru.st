{1,
{9,
{"ГВК_Шаблоны",1,0,"",""},
{9,
{"ОблегчениеИОформление",1,0,"",""},
{0,
{"ДляУдаления",0,0,"удл","#Если Сервер И НЕ Сервер Тогда  // < удалить
	<?>
#КонецЕсли // удалить >"}
},
{0,
{"начконизм",0,0,"гвк","//изм ГВК <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Номер трекера""> {
<?>
// ГВК <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> <?""Номер трекера""> }"}
},
{0,
{"ЗначениеЗаполнено",0,0,"зз","ЗначениеЗаполнено(<?> )"}
},
{0,
{"ЗаполнитьЗначенияСвойств",0,0,"ззс","ЗаполнитьЗначенияСвойств (<?""Приемник"">,<?""Источник"">);"}
},
{0,
{"ДобавитьВНаборЗаписей",0,0,"ДобавитьВНЗ","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборзаписей();
НаборЗаписей.Отбор.Свойство.Установить(СтароеСвойство);
НаборЗаписей.Отбор.Значение.Установить(ИД);
ЗаписьРегистра = НаборЗаписей.Добавить();
ЗаписьРегистра.Объект = Объект;
НаборЗаписей.Записать();"}
},
{0,
{"МодульФормыСтандарт",0,1,"","#Область ОбработчикиСобытийФормы
//Код процедур и функций
#КонецОбласти
Копировать в буфер обмена

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти
Копировать в буфер обмена

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти
Копировать в буфер обмена

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти
Копировать в буфер обмена

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти

"}
},
{0,
{"ЗаголовокКоментарий",0,0,"//*","
////////////////////////////////////////////////////////////////////////////////
// <?>
"}
},
{0,
{"НовыеСтроковыеФункции",0,0,"","// НовыеСтроковыеФункции - для старых версий!!!

Функция СтрНачинаетсяС(ИсходнаяСтрока, СтрокаПоиска)
	Рез = Ложь;
	Если СтрДлина(СтрокаПоиска) = 0 Тогда
		ВызватьИсключение (""Пустая строка поиска"");
	КонецЕсли; 
	Если СтрДлина(СтрокаПоиска) <= СтрДлина(ИсходнаяСтрока)  Тогда
		Рез = ( СтрокаПоиска = Лев(ИсходнаяСтрока,СтрДлина(СтрокаПоиска) ) );
	КонецЕсли;  
	Возврат Рез;	
КонецФункции

Функция СтрСоединить(МассивСлов, Разделитель)
	#Если Сервер И НЕ Сервер Тогда  // < удалить
		МассивСлов = Новый  Массив;
	#КонецЕсли // удалить >
	Рез = """";
	
	Для каждого Слово Из МассивСлов Цикл
		Если Рез = """" Тогда
			Рез = Слово;
		Иначе
			Рез = Рез + Разделитель + Слово;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция СтрРазделить(ИсходнаяСтрока, Разделитель, ВключатьПустые = Истина)
	ТекСтрока = ИсходнаяСтрока;
	МассивСлов = Новый Массив;
	
	Пока Найти(ТекСтрока,Разделитель) <> 0 Цикл
		Слово = Лев(ТекСтрока, Найти(ТекСтрока,Разделитель)-1);
		Если ЗначениеЗаполнено(Слово) ИЛИ ВключатьПустые Тогда
			МассивСлов.Добавить(Слово);
		КонецЕсли;
		ТекСтрока = Сред(ТекСтрока,Найти(ТекСтрока,Разделитель)+1 );
	КонецЦикла; 
	Если ЗначениеЗаполнено(ТекСтрока)  Тогда
		МассивСлов.Добавить(ТекСтрока);
	КонецЕсли; 
	
	Возврат МассивСлов;
	
КонецФункции


"}
},
{0,
{"ПредопределенноеЗначение",0,0,"ПЗ","ПредопределенноеЗначение(""<?>"");"}
}
},
{9,
{"Управляемые формы",1,0,"",""},
{0,
{"ПолучитьЗначениеРеквизита",0,0,"","&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)

	Возврат СсылкаНаОбъект[ИмяРеквизита]; 

КонецФункции // ПолучитьЗначениеРеквизита()
 "}
},
{0,
{"ПолучитьРеквизитыНаСервере",0,0,"","&НаСервереБезКонтекста
Процедура ПолучитьРеквизитыНаСервере(ОбъектСсылка, Реквизиты)
 	
	ЗаполнитьЗначенияСвойств(Реквизиты, ОбъектСсылка);	

КонецПроцедуры
"}
},
{0,
{"НаСервереБезКонтекста",0,1,"?насерб","&НаСервереБезКонтекста"}
},
{0,
{"НаСервере",0,1,"?насер","&НаСервере"}
},
{0,
{"НаКлиенте",0,1,"?накл","&НаКлиенте"}
},
{0,
{"УстановитьАвтоТест",0,1,"автотест","	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
"}
},
{0,
{"УстановкаПараметра",0,0,"УстПар","Параметр<?""Параметр""> = Неопределено;
Если Параметры.Свойство (""<?""Параметр"">"", Параметр<?""Параметр"">) Тогда
	<?""Параметр""> = Параметр<?""Параметр"">;
КонецЕсли;
"}
},
{0,
{"СообщениеГВК",0,0,"Сооб[щение]","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = НСтр(""ru = '<?>'"");
Сообщение.Поле = """";
Сообщение.УстановитьДанные();
Сообщение.Сообщить();"}
},
{0,
{"НовыйОтборСписка",0,0,"","ЭлементОтбора = <?""ИмяСписка"">.Элементы.Добавить(Тип(""ЭлементОтбораКомпоновкиДанных""));
ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(""<?""ИмяОтбора"">"");
ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование  = Истина;
ЭлементОтбора.ПравоеЗначение = <?""ИмяОтбора"">;
ЭлементОтбора.Представление  = ""<?""ИмяОтбора"">"";
"}
}
},
{1,
{"СКД",1,0,"",""},
{0,
{"ФиксированныеПараметры",0,0,"","// данные объекта

Перем Настройки;
Перем ПараметрДанныхНачалоПериода, ПараметрДанныхКонецПериода, ИменованныйОтбор, УсловноеОформление;

// процедуры модуля объекта

Процедура СформироватьОтчет() Экспорт
	Настройки =	КомпоновщикНастроек.Настройки;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
      
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ЭлементыФормы.Результат.Очистить();
	ДокументРезультат = ЭлементыФормы.Результат;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
КонецПроцедуры


Процедура УстановитьНастройки()
	ДатаНачала = НачалоГода(РабочаяДата);
	ДатаОкончания = КонецМесяца(РабочаяДата);
	
	ПараметрДанныхНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
	ПараметрДанныхНачалоПериода.Использование = Истина;

	ПараметрДанныхКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1];
	ПараметрДанныхКонецПериода.Значение = ДатаОкончания;
	ПараметрДанныхКонецПериода.Использование = Истина;
	
	ИменованныйОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы[0];
	ИспользованиеОтбора = ИменованныйОтбор.Использование;
	ПредставлениеОтбора = ИменованныйОтбор.Представление;
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы[0];
	ИспользованиеОформления = УсловноеОформление.Использование;
	ПредставлениеОформления = УсловноеОформление.Представление;
	
	ПараметрыВывода = КомпоновщикНастроек.Настройки.ПараметрыВывода;
	ПараметрВыводОтбора = ПараметрыВывода.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных(""ВыводитьОтбор""));
	ПараметрВыводОтбора.Использование = Истина;
	ПараметрВыводОтбора.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ПараметрВыводПараметров = ПараметрыВывода.НайтиЗначениеПараметра( Новый ПараметрКомпоновкиДанных(""ВыводитьПараметрыДанных""));
	ПараметрВыводПараметров.Использование = Истина;
	ПараметрВыводПараметров.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	
	Настройки = КомпоновщикНастроек.Настройки;
КонецПроцедуры

// процедуры модуля формы
//
Процедура ПриОткрытии()
	СхемаКомпоновкиДанных = ЭтотОбъект.ПолучитьМакет(""ОсновнаяСхемаКомпоновкиДанных"");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	УстановитьНастройки();
	СформироватьОтчет();
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	ПараметрДанныхНачалоПериода.Значение = ДатаНачала;
КонецПроцедуры

Процедура ДатаОкончанияПриИзменении(Элемент)
	ПараметрДанныхКонецПериода.Значение = ДатаОкончания;
КонецПроцедуры

Процедура ИспользованиеОтбораПриИзменении(Элемент)
	ИменованныйОтбор.Использование = ИспользованиеОтбора;
КонецПроцедуры

Процедура ИспользованиеОформленияПриИзменении(Элемент)
	УсловноеОформление.Использование = ИспользованиеОформления;
КонецПроцедуры
"}
}
},
{4,
{"НовыеДиалоги",1,0,"",""},
{0,
{"ВопросДаНет",0,0,"ВопросДаНет","&НаКлиенте
Процедура ОбработкаВопросаОчистки(РезультатВопроса,ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 	

КонецПроцедуры
 

&НаКлиенте
Процедура <?""ИмяПроцедуры"">()
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(""ОбработкаВопросаОчистки"", ЭтотОбъект);
	ТекстВопроса = НСтр(""ru = 'Таблица заказов будет очищена. Продолжить?'"");
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , ,);
	
КонецПроцедуры
"}
},
{0,
{"НемодальныйВызов",0,0,"","
	ДопПараметры = Новый Структура(); 
	ОписаниеОповещенияОСобытии = Новый ОписаниеОповещения(""""<?""ИмяОбработкиЗавершения"">"""", ЭтотОбъект, ДопПараметры);
	Режим = РежимОткрытияОкнаФормы.БлокироватьВеcьИнтерфейс;
	ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Добавить(Ключ,Значение);
	ОткрытьФорму(<?>,ПараметрыФормы, ЭтотОбъект,Истина,,,ОписаниеОповещенияОСобытии,Режим); 
// переместить ! 	
&НаКлиенте
Процедура <?""ИмяОбработкиЗавершения"">(Результат,ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли; 	

КонецПроцедуры
"}
},
{0,
{"ВыборДиректории",0,0,"","&НаКлиенте
Процедура <?""Имя реквизита"">ОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	<?""Имя реквизита""> = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура <?""Имя реквизита"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""Имя реквизита"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""<?""Имя реквизита"">ОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ВыборФайла",0,0,"","&НаКлиенте
Процедура <?""Имя реквизита"">ОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	<?""Имя реквизита""> = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура <?""Имя реквизита"">НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.Открытие; // ???
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = НСтр(""ru = '<?""Расширение файла"">'; en = '<?""Расширение файла"">'"")
    + ""(*.<?""Расширение файла"">)|*.<?""Расширение файла"">"";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.ПолноеИмяФайла = <?""Имя реквизита"">;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите файл"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""<?""Имя реквизита"">ОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
}
},
{8,
{"ДополнительныеОбработки",1,0,"",""},
{0,
{"ВнешнийОтчетГВК",0,0,"","////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.4"");
	
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = ""1.0.1.1"";
	ПараметрыРегистрации.ОпределитьНастройкиФормы = Истина;
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр(""ru = '<?""Представление"">'"");
	НоваяКоманда.Идентификатор = ""ДополнительныйОтчетПолучитьПростойОтчет"";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Настройки общей формы отчета подсистемы ""Варианты отчетов"".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	//Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных(""Период""), Перечисления.ДоступныеПериодыОтчета.Месяц);
	Настройки.ФормироватьСразу = Истина;
КонецПроцедуры

#КонецОбласти
"}
},
{0,
{"СведенияОВнешнейОбработке",0,0,"","Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<...>(); //
	// «ДополнительнаяОбработка», «ДополнительныйОтчет», «ЗаполнениеОбъекта», «Отчет», «ПечатнаяФорма» или «СозданиеСвязанныхОбъектов»
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
    ПараметрыРегистрации.Версия = ""1.0.1.1"";
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<Представление команды>'"");
    Команда.Идентификатор = ""<Имя команды>"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<...>();
    Команда.ПоказыватьОповещение = <Истина/Ложь>;
    Возврат ПараметрыРегистрации; 
КонецФункции
"}
},
{0,
{"ВнешняяПечатнаяФорма",0,0,"","// внешняя печатная форма
Функция СведенияОВнешнейОбработке() Экспорт
    ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(""2.2.2.1"");
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма(); //
	// «ДополнительнаяОбработка», «ДополнительныйОтчет», «ЗаполнениеОбъекта», «Отчет», «ПечатнаяФорма» или «СозданиеСвязанныхОбъектов»
	ПараметрыРегистрации.Назначение.Добавить(""Документ.<?""Тип Документа"", Документ>""); //""Справочник._ДемоКонтрагенты"");
    ПараметрыРегистрации.Версия = ""0.0.0.1"";
    Команда = ПараметрыРегистрации.Команды.Добавить();
    Команда.Представление = НСтр(""ru = '<?""Представление команды"">'"");
    Команда.Идентификатор = ""<?""Имя команды"">"";
    Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
    Возврат ПараметрыРегистрации; 
КонецФункции

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
    ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, ""<?""Имя команды"">"");
    Если ПечатнаяФорма <> Неопределено Тогда
        ПечатнаяФорма.ТабличныйДокумент = СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати);
        ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""Представление команды"">'"");
    КонецЕсли;
КонецПроцедуры

Функция СформироватьТабличныйДокумент(МассивОбъектов, ОбъектыПечати)
    ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет(""Макет"");
	
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
  	Запрос.Текст = """";

	Запрос.УстановитьПараметр(""МассивОбъектов"",МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть(""Заголовок"");
	ОбластьПодвал = Макет.ПолучитьОбласть(""Подвал"");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть(""ШапкаТаблицы"");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть(""ПодвалТаблицы"");
	ОбластьСсылка = Макет.ПолучитьОбласть(""Ссылка"");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть(""Детали"");
	
	ТабДок.Очистить();
	НомерДокумента = 0;
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		Если НомерДокумента > 0 Тогда
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли; 
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаСсылка);
		ОбластьСсылка.Параметры.Заполнить(ВыборкаСсылка);
		ТабДок.Вывести(ОбластьЗаголовок);
		ТабДок.Вывести(ОбластьШапкаТаблицы);
	
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ТабДок.Вывести(ОбластьДетальныхЗаписей);
		КонецЦикла;
		ТабДок.Вывести(ОбластьПодвалТаблицы);
		ТабДок.Вывести(ОбластьСсылка);
		НомерДокумента = НомерДокумента + 1;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьПодвал);
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА


    Возврат ТабДок;
КонецФункции
	"}
},
{0,
{"ФормаВнешнейПечатнойФормы",0,0,"","// назначить обработчик для команды Печать 
// ДокументСсылка - документ выбранного типа как реквизит обработки

// Подготовить коллекцию печатных форм - таблицу значений используемые при формировании печатных форм
//
&НаСервере
Функция ПодготовитьКоллекциюПечатныхФорм(Знач ИменаМакетов) Экспорт
	
	Макеты = Новый ТаблицаЗначений;
	Макеты.Колонки.Добавить(""ИмяМакета"");
	Макеты.Колонки.Добавить(""ИмяВРЕГ"");
	Макеты.Колонки.Добавить(""СинонимМакета"");
	Макеты.Колонки.Добавить(""ТабличныйДокумент"");
	Макеты.Колонки.Добавить(""Экземпляров"");
	Макеты.Колонки.Добавить(""Картинка"");
	Макеты.Колонки.Добавить(""ПолныйПутьКМакету"");
	Макеты.Колонки.Добавить(""ИмяФайлаПечатнойФормы"");
	
	Если ТипЗнч(ИменаМакетов) = Тип(""Строка"") Тогда
		ИменаМакетов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	КонецЕсли;
	
	Для Каждого ИмяМакета Из ИменаМакетов Цикл
		Макет = Макеты.Найти(ИмяМакета, ""ИмяМакета"");
		Если Макет = Неопределено Тогда
			Макет = Макеты.Добавить();
			Макет.ИмяМакета = ИмяМакета;
			Макет.ИмяВРЕГ = ВРег(ИмяМакета);
			Макет.Экземпляров = 1;
		Иначе
			Макет.Экземпляров = Макет.Экземпляров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Макеты;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере()
	// Вставить содержимое обработчика.
	ОбъектыСоответствующиеПечатнойФорме = Новый Массив;
	ОбъектыСоответствующиеПечатнойФорме.Добавить(Объект.ДокументСсылка);
	ПараметрыПечати = Новый Структура;
	ОбъектыПечати = Новый СписокЗначений;
	
	ВременнаяКоллекцияДляОднойПечатнойФормы = ПодготовитьКоллекциюПечатныхФорм(""<?""Имя команды"">"");
	ПараметрыОтправки = Новый Структура(""Получатель,Тема,Текст"",Неопределено ,"""","""" ) ;
	ПараметрыВывода = Новый Структура(""ДоступнаПечатьПоКомплектно,ПараметрыОтправки"" ,Ложь,ПараметрыОтправки);
	//				МенеджерПечати.Печать(ОбъектыСоответствующиеПечатнойФорме, ПараметрыПечати, ВременнаяКоллекцияДляОднойПечатнойФормы, ОбъектыПечати, ПараметрыВывода);
	РеквизитФормыВЗначение(""Объект"").Печать(ОбъектыСоответствующиеПечатнойФорме,ВременнаяКоллекцияДляОднойПечатнойФормы,ОбъектыПечати,ПараметрыВывода);
	ТабДок =ВременнаяКоллекцияДляОднойПечатнойФормы[0].ТабличныйДокумент;
	
	Возврат ТабДок;
		
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	ТабДок = ПечатьНаСервере();
	ТабДок.Показать(""Документ"");
	ПечатьНаСервере();
КонецПроцедуры
"}
},
{0,
{"ВыборФайлаПоНовому",0,0,"","&НаКлиенте
Процедура ДиректорияОкончаниеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Объект.Директория = ВыбранныеФайлы [0]; 
КонецПроцедуры
 
&НаКлиенте
Процедура ДиректорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.Директория;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = ""Выберите каталог"";
	ОписаниеОповещение = Новый ОписаниеОповещения(""ДиректорияОкончаниеВыбора"",Этотобъект);
	ДиалогОткрытияФайла. Показать(ОписаниеОповещение);
КонецПроцедуры
"}
},
{0,
{"ИзменениеДокументовВВыборке",0,0,"","////////////////////////////////////////////////////////////////////////////////
//
// Процедура ИсправлениеДокументов
//
// Описание: исправление (изменение) документов отобранных запросом
//          В запросе должно быть поле ДокументСсылка...
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ИсправлениеДокументов(ПериодДокументов) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время начало обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	Счетчики = Новый Структура(""Всего,НеЗаблокировано,Изменено,НеПроведено"",0,0,0,0 );
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =  ""<?"""", ТекстЗапроса>"";
	Запрос.УстановитьПараметр(""ДатаНачала"", ПериодДокументов.ДатаНачала);
	Запрос.УстановитьПараметр(""ДатаОкончания"", ПериодДокументов.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Счетчики.Всего = ВыборкаДетальныеЗаписи.Количество();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ДокументОбъект = ВыборкаДетальныеЗаписи.ДокументСсылка.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
			Продолжить;
		КонецПопытки;
		// <...изменения документа..>
		// записываем изменения в любом случае, даже если документ не проводится!!!
		Записывать = Истина;
		Если ДокументОбъект.Проведен Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ДокументОбъект);
				Сообщение.Сообщить(); 
				Счетчики.НеПроведено = Счетчики.НеПроведено + 1;
			КонецПопытки; 
		КонецЕсли;
		Если Записывать Тогда
		    Если ДокументОбъект.Проведен Тогда
			    // ошибка при проведении - записываем с отменой
				Режим = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				Режим = РежимЗаписиДокумента.Запись;
			КонецЕсли; 
			Попытка
				ДокументОбъект.Записать(Режим);
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ДокументОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ДокументОбъект);
				Сообщение.Сообщить(); 
			КонецПопытки; 
		КонецЕсли; 
		ДокументОбъект.Разблокировать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Результат обработки: Всего отобрано - '"") + Счетчики.Всего + нСтр(""ru='; изменено - '"", ""ru"") + Счетчики.Изменено  +
						нСтр(""ru='; было недоступно для изменения - '"", ""ru"") + Счетчики.НеЗаблокировано ;
	Сообщение.Сообщить(); 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время окончания обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	
КонецПроцедуры //ИсправлениеДокументов

 "}
},
{0,
{"ИзменениеОбъектаВВыборке",0,0,"","////////////////////////////////////////////////////////////////////////////////
//
// Процедура ИсправлениеОбъектов
//
// Описание: исправление (изменение) документов отобранных запросом
//          В запросе должно быть поле ДокументСсылка...
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ИсправлениеОбъектов(ПериодДокументов) Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время начало обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	Счетчики = Новый Структура(""Всего,НеЗаблокировано,Изменено,НеПроведено"",0,0,0,0 );
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст =  ""
		<?"""", ТекстЗапроса>"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Счетчики.Всего = ВыборкаДетальныеЗаписи.Количество();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
		ИсправляемыйОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			ИсправляемыйОбъект.Заблокировать();
		Исключение
			Счетчики.НеЗаблокировано = Счетчики.НеЗаблокировано + 1;
			Продолжить;
		КонецПопытки;
		// <...изменения документа..>
		// записываем изменения в любом случае, даже если документ не проводится!!!
		Записывать = Истина;
		Если Записывать Тогда
			Попытка
				ИсправляемыйОбъект.Записать();
				Записывать = Ложь;
				Счетчики.Изменено = Счетчики.Изменено + 1;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(""ru = 'Документ '"") + ИсправляемыйОбъект + нСтр(""ru=' из-за :'"", ""ru"") + Символы.ВК + Символы.ПС + ОписаниеОшибки() ;
				Сообщение.УстановитьДанные(ИсправляемыйОбъект);
				Сообщение.Сообщить(); 
			КонецПопытки; 
		КонецЕсли; 
		ИсправляемыйОбъект.Разблокировать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Результат обработки: Всего отобрано - '"") + Счетчики.Всего + нСтр(""ru='; изменено - '"", ""ru"") + Счетчики.Изменено  +
						нСтр(""ru='; было недоступно для изменения - '"", ""ru"") + Счетчики.НеЗаблокировано ;
	Сообщение.Сообщить(); 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр(""ru = 'Время окончания обработки - '"") + Формат(ТекущаяДата(), """") ;
	Сообщение.Сообщить(); 
	
КонецПроцедуры //ИсправлениеДокументов

 "}
},
{0,
{"Отладка",0,0,"Отладка","Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда 
	Сообщение = Новый СообщениеПользователю; // параметр запуска РежимОтладки
	Сообщение.Текст = ""<?""Текст сообщения"">"";
	Сообщение.Сообщить(); 
КонецЕсли; 
"}
}
},
{1,
{"Управление",1,0,"",""},
{0,
{"ЕслиИначе",0,0,"ЕслиИ","Если <?> Тогда
	
Иначе
	
КонецЕсли; "}
}
},
{1,
{"Коллекции",1,0,"",""},
{0,
{"КолонкаТЗ",0,0,"ДобКол","Колонки.Добавить(""<?""Имя колонки"">"",Новый ОписаниеТипов(<?"""", ВыборТипа>));"}
}
},
{3,
{"Расширения",1,0,"",""},
{0,
{"Вместо",0,0,"7вме","&Вместо (""<?>"")"}
},
{0,
{"После",0,0,"7пос","&После (""<?>"")
"}
},
{0,
{"Перед",0,0,"7пер","&Перед (""<?>"")
"}
}
},
{5,
{"Стандарты + БСП",1,0,"",""},
{0,
{"ШаблонМодуляФормы",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Описание параметров формы
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонОбщегоМодуля",0,0,"","////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
// 
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонМодуляОбработкиИОбъекта",0,0,"","#Область ПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытий
//Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//Код процедур и функций
#КонецОбласти"}
},
{0,
{"ШаблонМодуляФормыОбъекта",0,0,"","////////////////////////////////////////////////////////////////////////////////
// Описание параметров формы
// 
// 
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа. (ПриСозданииНаСервере)
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// вызов механизмов стандартных подсистем
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	//
	ИнициализацияФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы<ИмяТаблицыФормы>
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы
//Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ИнициализацияФормы()
	
КонецПроцедуры
#КонецОбласти"}
},
{0,
{"ВыводТабличногоДокумента",0,0,"","	// вывод в стандартную форму табличного документа (БСП)
	ИдентификаторПечатнойФормы = ""<?""ИдентификаторПечатнойФормы"">"";
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НСтр(""ru = '<?""СинонимПечатнойФормы"">'"");
	ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр(""ru = '<?""ИмяФайлаПечатнойФормы"">'"");
	
	ОбъектыПечати = Новый СписокЗначений;
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура(""ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати"");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.ПараметрыПечати.Вставить(""ЗаголовокФормы"", НСтр(""ru = '<?""СинонимПечатнойФормы"">'""));
	
	ПараметрыОткрытия.Вставить(""КоллекцияПечатныхФорм"", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить(""ОбъектыПечати"", ОбъектыПечати);
	
	ОткрытьФорму(""ОбщаяФорма.ПечатьДокументов"", ПараметрыОткрытия, Неопределено, КлючУникальности);
"}
}
}
}
}